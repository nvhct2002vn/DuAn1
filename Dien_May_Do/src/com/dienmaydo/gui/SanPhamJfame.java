/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dienmaydo.gui;

import com.dienmaydo.entity.ChatLieu;
import com.dienmaydo.entity.DanhMuc;
import com.dienmaydo.entity.DonViTinh;
import com.dienmaydo.entity.Image;
import com.dienmaydo.entity.KhoiLuong;
import com.dienmaydo.entity.KichThuoc;
import com.dienmaydo.entity.MauSac;
import com.dienmaydo.entity.SanPham;
import com.dienmaydo.entity.SanPhamChiTiet;
import com.dienmaydo.entity.TheTich;
import com.dienmaydo.entity.XuatXu;
import com.dienmaydo.service.ChatLieuService;
import com.dienmaydo.service.DanhMucService;
import com.dienmaydo.service.DonViTinhService;
import com.dienmaydo.service.ImageService;
import com.dienmaydo.service.KhoiLuongService;
import com.dienmaydo.service.KichThuocService;
import com.dienmaydo.service.MauSacService;
import com.dienmaydo.service.SanPhamChiTietService;
import com.dienmaydo.service.SanPhamService;
import com.dienmaydo.service.TheTichService;
import com.dienmaydo.service.XuatXuService;
import com.dienmaydo.utils.Msgbox;
import com.dienmaydo.utils.XImage;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import javax.swing.JFileChooser;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Nguyễn Viết Hiên
 */
public class SanPhamJfame extends javax.swing.JFrame {

    /**
     * Creates new form HangHoaJfame
     */
    SanPhamService daoSP = new SanPhamService();
    XuatXuService daoXX = new XuatXuService();
    DanhMucService daoDM = new DanhMucService();
    SanPhamChiTietService daoSPCT = new SanPhamChiTietService();
//    List<SanPhamChiTiet> ListSPCT = daoSPCT.selectAll();
    List<DanhMuc> listDM = daoDM.selectAll();
    List<XuatXu> listXX = daoXX.selectAll();

    MauSacService daoMS = new MauSacService();
    List<MauSac> listMS = daoMS.selectAll();

    TheTichService daoTT = new TheTichService();
    List<TheTich> listTT = daoTT.selectAll();

    KichThuocService daoKT = new KichThuocService();
    List<KichThuoc> listKT = daoKT.selectAll();

    KhoiLuongService daoKL = new KhoiLuongService();
    List<KhoiLuong> listKL = daoKL.selectAll();

    DonViTinhService daoDVT = new DonViTinhService();
    List<DonViTinh> listDVT = daoDVT.selectAll();

    ChatLieuService daoCL = new ChatLieuService();
    List<ChatLieu> listCL = daoCL.selectAll();

    ImageService daoIMG = new ImageService();
    List<Image> listIMG = daoIMG.selectAll();

    DefaultTableModel model1, modelSPCT;
    int viTri = 0;
    int row = 0;
    int vitriSPCT;

    public SanPhamJfame() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
//        for (int i = 0; i < listDM.size(); i++) {
//            jComboBox1.addItem(listDM.get(i).getTenDanhMuc());
//        }
//        for (int i = 0; i < listXX.size(); i++) {
//            cbbMaXuatXu.addItem(String.valueOf(listXX.get(i).getMaXX()));
//        }
//        for (int i = 0; i < listXX.size(); i++) {
//            jComboBox1.addItem(listXX.get(i).getNuocSX());
//        }
        addDataCbbXX();
        addDataCbbDM();
        addDataCbbTT();
        addDataCbbKT();
        addDataCbbKL();
        addDataCbbCL();
        addDataCbbMS();
        addDataCbbIMG();
        fillTableData();
        clickTable();
        fillTableSPCT();
        FillCbbMaSP();
        addDataFillCbbDM();
//        row = 0;
//        edit();
//        vitriSPCT = 0;
//        clickTabelSPCT();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        pnTongQuat = new javax.swing.JTabbedPane();
        pnSanPham = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblThongTin = new javax.swing.JTable();
        txtTimKiem = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        btnChiTietSP = new javax.swing.JButton();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnLamMoi = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtMaSP = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtTenSP = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        cbbXuatXu = new javax.swing.JComboBox<>();
        cbbDanhMuc = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        cbbFillDanhMuc = new javax.swing.JComboBox<>();
        pnSPCT = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSanPhamChiTiet = new javax.swing.JTable();
        txtTimKiemSPCT = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        btnThemSPCT = new javax.swing.JButton();
        btnSuaSPCT = new javax.swing.JButton();
        btnLamMoiSPCT = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtMaSPCT = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtTenSPCT = new javax.swing.JTextField();
        txtSoLuong = new javax.swing.JTextField();
        lblHinhAnh = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtGiaBan = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        AreaMoTa = new javax.swing.JTextArea();
        jLabel20 = new javax.swing.JLabel();
        cbbMaSP = new javax.swing.JComboBox<>();
        cbbIMG = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        txtGiaNhap = new javax.swing.JTextField();
        rdoPhoBien = new javax.swing.JRadioButton();
        rdoKhongPhoBien = new javax.swing.JRadioButton();
        jLabel12 = new javax.swing.JLabel();
        cbbTheTich = new javax.swing.JComboBox<>();
        cbbKichThuoc = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        cbbKhoiLuong = new javax.swing.JComboBox<>();
        cbbChatLieu = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cbbMauSac = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        pnTongQuat.setPreferredSize(new java.awt.Dimension(1146, 768));

        pnSanPham.setBackground(new java.awt.Color(255, 204, 0));
        pnSanPham.setPreferredSize(new java.awt.Dimension(1146, 768));

        tblThongTin.setBackground(new java.awt.Color(255, 204, 0));
        tblThongTin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sản phẩm", "Tên sản phẩm", "Tên danh mục", "Nhà sản xuất", "Nước sản xuất"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblThongTin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblThongTinMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblThongTin);

        txtTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemKeyReleased(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Tìm kiếm sản phẩm:");

        btnChiTietSP.setBackground(new java.awt.Color(0, 0, 0));
        btnChiTietSP.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnChiTietSP.setForeground(new java.awt.Color(255, 255, 255));
        btnChiTietSP.setText("Chi tiết sản phẩm");
        btnChiTietSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChiTietSPActionPerformed(evt);
            }
        });

        btnThem.setBackground(new java.awt.Color(0, 0, 0));
        btnThem.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnThem.setForeground(new java.awt.Color(255, 255, 255));
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnSua.setBackground(new java.awt.Color(0, 0, 0));
        btnSua.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSua.setForeground(new java.awt.Color(255, 255, 255));
        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnLamMoi.setBackground(new java.awt.Color(0, 0, 0));
        btnLamMoi.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnLamMoi.setForeground(new java.awt.Color(255, 255, 255));
        btnLamMoi.setText("Làm mới");
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Mã sản phẩm:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Tên sản phẩm:");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel18.setText("Danh mục:");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel19.setText("Xuất xứ:");

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel22.setText("Danh mục:");

        cbbFillDanhMuc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbFillDanhMucActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnSanPhamLayout = new javax.swing.GroupLayout(pnSanPham);
        pnSanPham.setLayout(pnSanPhamLayout);
        pnSanPhamLayout.setHorizontalGroup(
            pnSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSanPhamLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnChiTietSP)
                .addGap(70, 70, 70)
                .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(btnLamMoi)
                .addGap(271, 271, 271))
            .addGroup(pnSanPhamLayout.createSequentialGroup()
                .addGroup(pnSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnSanPhamLayout.createSequentialGroup()
                        .addGap(388, 388, 388)
                        .addGroup(pnSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19))
                        .addGap(31, 31, 31)
                        .addGroup(pnSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMaSP)
                            .addComponent(txtTenSP)
                            .addComponent(cbbXuatXu, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbbDanhMuc, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnSanPhamLayout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(jLabel22)
                        .addGap(31, 31, 31)
                        .addComponent(cbbFillDanhMuc, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(201, Short.MAX_VALUE))
        );

        pnSanPhamLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnLamMoi, btnSua, btnThem});

        pnSanPhamLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbbDanhMuc, cbbXuatXu, txtMaSP, txtTenSP});

        pnSanPhamLayout.setVerticalGroup(
            pnSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSanPhamLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(pnSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtTenSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(cbbDanhMuc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(cbbXuatXu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(pnSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThem)
                    .addComponent(btnSua)
                    .addComponent(btnChiTietSP)
                    .addComponent(btnLamMoi))
                .addGap(43, 43, 43)
                .addGroup(pnSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel22)
                    .addComponent(cbbFillDanhMuc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE))
        );

        pnSanPhamLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnLamMoi, btnSua, btnThem});

        pnSanPhamLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cbbDanhMuc, cbbXuatXu, txtMaSP, txtTenSP});

        pnTongQuat.addTab("Sản phẩm", pnSanPham);

        pnSPCT.setBackground(new java.awt.Color(255, 204, 0));
        pnSPCT.setPreferredSize(new java.awt.Dimension(1146, 768));

        tblSanPhamChiTiet.setBackground(new java.awt.Color(255, 204, 0));
        tblSanPhamChiTiet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sản phẩm chi tiết", "Tên sản phẩm chi tiết", "Số lượng tồn", "Giá nhập", "Giá bán", "Nhóm", "Màu", "Thể tích", "Kích thước", "Khối lượng", "Chất liệu", "Hình ảnh", "Mô tả"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSanPhamChiTiet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSanPhamChiTietMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblSanPhamChiTiet);

        txtTimKiemSPCT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemSPCTKeyReleased(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Tìm kiếm sản phẩm:");

        btnThemSPCT.setBackground(new java.awt.Color(0, 0, 0));
        btnThemSPCT.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnThemSPCT.setForeground(new java.awt.Color(255, 255, 255));
        btnThemSPCT.setText("Thêm");
        btnThemSPCT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemSPCTActionPerformed(evt);
            }
        });

        btnSuaSPCT.setBackground(new java.awt.Color(0, 0, 0));
        btnSuaSPCT.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSuaSPCT.setForeground(new java.awt.Color(255, 255, 255));
        btnSuaSPCT.setText("Sửa");
        btnSuaSPCT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaSPCTActionPerformed(evt);
            }
        });

        btnLamMoiSPCT.setBackground(new java.awt.Color(0, 0, 0));
        btnLamMoiSPCT.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnLamMoiSPCT.setForeground(new java.awt.Color(255, 255, 255));
        btnLamMoiSPCT.setText("Làm mới");
        btnLamMoiSPCT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiSPCTActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Mã sản phẩm chi tiết:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Tên sản phẩm chi tiết:");

        lblHinhAnh.setBackground(new java.awt.Color(255, 255, 255));
        lblHinhAnh.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHinhAnh.setForeground(new java.awt.Color(51, 51, 51));
        lblHinhAnh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHinhAnh.setText("Chọn ảnh");
        lblHinhAnh.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblHinhAnh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHinhAnhMouseClicked(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setText("Mô tả:");

        AreaMoTa.setColumns(20);
        AreaMoTa.setRows(5);
        jScrollPane3.setViewportView(AreaMoTa);

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel20.setText("Sản phẩm:");

        cbbMaSP.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cbbMaSP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbMaSPItemStateChanged(evt);
            }
        });

        cbbIMG.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbIMGItemStateChanged(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel21.setText("Nhóm phổ biến:");

        rdoPhoBien.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rdoPhoBien);
        rdoPhoBien.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rdoPhoBien.setSelected(true);
        rdoPhoBien.setText("Phổ biến");

        rdoKhongPhoBien.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rdoKhongPhoBien);
        rdoKhongPhoBien.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rdoKhongPhoBien.setText("Không phổ biến");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Thể tích:");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("Kích thước:");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText("Khối lượng:");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setText("Chất liệu:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Màu:");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setText("Số lượng:");

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel23.setText("Giá nhập:");

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel24.setText("Giá bán:");

        javax.swing.GroupLayout pnSPCTLayout = new javax.swing.GroupLayout(pnSPCT);
        pnSPCT.setLayout(pnSPCTLayout);
        pnSPCTLayout.setHorizontalGroup(
            pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(pnSPCTLayout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnSPCTLayout.createSequentialGroup()
                        .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20))
                        .addGap(29, 29, 29)
                        .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbbMaSP, 0, 160, Short.MAX_VALUE)
                            .addComponent(txtTimKiemSPCT)))
                    .addGroup(pnSPCTLayout.createSequentialGroup()
                        .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnSPCTLayout.createSequentialGroup()
                                .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnSPCTLayout.createSequentialGroup()
                                .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtGiaNhap, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSoLuong, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTenSPCT, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMaSPCT, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtGiaBan, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnSPCTLayout.createSequentialGroup()
                                .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel21)
                                    .addGroup(pnSPCTLayout.createSequentialGroup()
                                        .addComponent(rdoPhoBien, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(72, 72, 72)
                                        .addComponent(rdoKhongPhoBien)))
                                .addGap(10, 10, 10)
                                .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cbbChatLieu, javax.swing.GroupLayout.Alignment.LEADING, 0, 99, Short.MAX_VALUE)
                                    .addComponent(cbbKhoiLuong, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbbKichThuoc, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbbTheTich, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbbMauSac, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(10, 10, 10)
                                .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbbIMG, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblHinhAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnSPCTLayout.createSequentialGroup()
                                .addComponent(btnThemSPCT, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(57, 57, 57)
                                .addComponent(btnSuaSPCT, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(67, 67, 67)
                                .addComponent(btnLamMoiSPCT, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(77, Short.MAX_VALUE))
        );

        pnSPCTLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbbChatLieu, cbbKhoiLuong, cbbKichThuoc, cbbMaSP, cbbMauSac, cbbTheTich, txtGiaBan, txtGiaNhap, txtMaSPCT, txtSoLuong, txtTenSPCT, txtTimKiemSPCT});

        pnSPCTLayout.setVerticalGroup(
            pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSPCTLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnSPCTLayout.createSequentialGroup()
                        .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(cbbTheTich, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(cbbKichThuoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(cbbKhoiLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(cbbChatLieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(cbbMauSac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnSPCTLayout.createSequentialGroup()
                        .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMaSPCT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdoPhoBien)
                            .addComponent(rdoKhongPhoBien)
                            .addComponent(txtTenSPCT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addGap(15, 15, 15)
                        .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(pnSPCTLayout.createSequentialGroup()
                                .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtGiaNhap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel23))
                                .addGap(18, 18, 18)
                                .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtGiaBan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel24)))))
                    .addGroup(pnSPCTLayout.createSequentialGroup()
                        .addComponent(cbbIMG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(lblHinhAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnThemSPCT)
                    .addComponent(btnSuaSPCT)
                    .addComponent(btnLamMoiSPCT))
                .addGap(20, 20, 20)
                .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnSPCTLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel10))
                    .addComponent(txtTimKiemSPCT, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE))
        );

        pnSPCTLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cbbChatLieu, cbbKhoiLuong, cbbKichThuoc, cbbMaSP, cbbMauSac, cbbTheTich, txtGiaBan, txtGiaNhap, txtMaSPCT, txtSoLuong, txtTenSPCT, txtTimKiemSPCT});

        pnTongQuat.addTab("Sản phẩm chi tiết", pnSPCT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnTongQuat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnTongQuat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbbIMGItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbIMGItemStateChanged
        Image img = (Image) cbbIMG.getSelectedItem();
        lblHinhAnh.setIcon(XImage.read(img.getTenHinh()));
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbIMGItemStateChanged

    private void cbbMaSPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbMaSPItemStateChanged
        fillTableSPCT_MaSP_Combobox();
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbMaSPItemStateChanged

    private void lblHinhAnhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHinhAnhMouseClicked
        chonAnh();
        // TODO add your handling code here:
    }//GEN-LAST:event_lblHinhAnhMouseClicked

    private void btnLamMoiSPCTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiSPCTActionPerformed
        fillTableSPCT();
        FillCbbMaSP();
        clearFromSPCT();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLamMoiSPCTActionPerformed

    private void btnSuaSPCTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaSPCTActionPerformed
        if (isValidateSPCT()) {
            return;
        } else {
            updatetDataSPCT();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSuaSPCTActionPerformed

    private void btnThemSPCTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemSPCTActionPerformed
        if (isValidateSPCT()) {
            return;
        } else if (isCheckTrungSPCT()) {
            return;
        } else {
            insertDataSPCT();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnThemSPCTActionPerformed

    private void txtTimKiemSPCTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemSPCTKeyReleased
        timKiemSPCT();
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimKiemSPCTKeyReleased

    private void tblSanPhamChiTietMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSanPhamChiTietMouseClicked
        //        row = tblSanPhamChiTiet.getSelectedRow();
        //        edit();
        clickTabelSPCT();
        // TODO add your handling code here:
    }//GEN-LAST:event_tblSanPhamChiTietMouseClicked

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        refeshTextFiled();
        fillTableData();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        if (isValidate()) {
            return;
        } else {
            updatetData();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        if (isValidate()) {
            return;
        } else if (isCheckTrung()) {
            return;
        } else {
            insertData();
            //            fillTableSPCT();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnChiTietSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChiTietSPActionPerformed
        int index = tblThongTin.getSelectedRow();
        if (index < 0) {
            Msgbox.alert(this, "Vui lòng chọn sản phẩm");
        } else {
            FillCbbMaSP();
            setSelectedComboboxTenSP(tblThongTin.getValueAt(viTri, 0).toString() + " - " + tblThongTin.getValueAt(viTri, 1).toString(), cbbMaSP);
            clickOpenSPCT();
            //            row = 0;
            //            edit();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnChiTietSPActionPerformed

    private void txtTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemKeyReleased
        timKiemSP();
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimKiemKeyReleased

    private void tblThongTinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblThongTinMouseClicked
        viTri = tblThongTin.getSelectedRow();
        clickTable();
        // TODO add your handling code here:
    }//GEN-LAST:event_tblThongTinMouseClicked

    private void cbbFillDanhMucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbFillDanhMucActionPerformed
        fillComBoBoxDanhMuc();
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbFillDanhMucActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SanPhamJfame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SanPhamJfame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SanPhamJfame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SanPhamJfame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SanPhamJfame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AreaMoTa;
    private javax.swing.JButton btnChiTietSP;
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnLamMoiSPCT;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnSuaSPCT;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnThemSPCT;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbbChatLieu;
    private javax.swing.JComboBox<String> cbbDanhMuc;
    private javax.swing.JComboBox<String> cbbFillDanhMuc;
    private javax.swing.JComboBox<String> cbbIMG;
    private javax.swing.JComboBox<String> cbbKhoiLuong;
    private javax.swing.JComboBox<String> cbbKichThuoc;
    private javax.swing.JComboBox<String> cbbMaSP;
    private javax.swing.JComboBox<String> cbbMauSac;
    private javax.swing.JComboBox<String> cbbTheTich;
    private javax.swing.JComboBox<String> cbbXuatXu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblHinhAnh;
    private javax.swing.JPanel pnSPCT;
    private javax.swing.JPanel pnSanPham;
    private javax.swing.JTabbedPane pnTongQuat;
    private javax.swing.JRadioButton rdoKhongPhoBien;
    private javax.swing.JRadioButton rdoPhoBien;
    private javax.swing.JTable tblSanPhamChiTiet;
    private javax.swing.JTable tblThongTin;
    private javax.swing.JTextField txtGiaBan;
    private javax.swing.JTextField txtGiaNhap;
    private javax.swing.JTextField txtMaSP;
    private javax.swing.JTextField txtMaSPCT;
    private javax.swing.JTextField txtSoLuong;
    private javax.swing.JTextField txtTenSP;
    private javax.swing.JTextField txtTenSPCT;
    private javax.swing.JTextField txtTimKiem;
    private javax.swing.JTextField txtTimKiemSPCT;
    // End of variables declaration//GEN-END:variables

    boolean isValidate() {
        try {
            if (txtMaSP.getText().trim().equals("")) {
                Msgbox.alert(this, "Mã sản phẩm không được để trống");
                return true;
            } else if (txtTenSP.getText().trim().equals("")) {
                Msgbox.alert(this, "Tên sản phẩm không được để trống");
                return true;
            } else if (txtMaSP.getText().length() > 10) {
                Msgbox.alert(this, "Mã sản phẩm tối đa 10 kí tự");
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return true;
        }
    }

    boolean isCheckTrung() {
        boolean check = false;
        List<SanPham> list = daoSP.selectAll();
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getMaSp().equalsIgnoreCase(txtMaSP.getText())) {
                Msgbox.alert(this, "Mã sản phẩm đã tồn tại");
                check = true;
                break;
            }
        }
        return check;
    }

    void addDataCbbXX() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbbXuatXu.getModel();
        model.removeAllElements();
        List<XuatXu> list = daoXX.selectAll();
        for (XuatXu cd : list) {
            model.addElement(cd);
        }
    }

    void addDataCbbDM() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbbDanhMuc.getModel();
        model.removeAllElements();
        List<DanhMuc> list = daoDM.selectAll();
        for (DanhMuc cd : list) {
            model.addElement(cd);
        }
    }

    void addDataFillCbbDM() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbbFillDanhMuc.getModel();
        model.removeAllElements();
        List<DanhMuc> list = daoDM.selectAll();
        for (DanhMuc cd : list) {
            model.addElement(cd);
        }
    }

    void fillComBoBoxDanhMuc() {
        model1 = (DefaultTableModel) tblThongTin.getModel();
        model1.setRowCount(0);
        try {
            DanhMuc dm = (DanhMuc) cbbFillDanhMuc.getSelectedItem();
            List<SanPham> listSPCT = daoSP.selectByDM(dm.getTenDanhMuc());
            for (SanPham x : listSPCT) {
                model1.addRow(new Object[]{
                    x.getMaSp(), x.getTenSp(), x.getTenDanhMuc(), x.getNhaSX(), x.getNuocSX()
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //-------------------------- Test ---------------------------------------------------
//    void fillcbbDanhMuc() {
//        DanhMuc dm = daoDM.selectByID(cbbMaDanhMuc.getSelectedItem().toString());
//        lblTenDanhMuc.setText(dm.getTenDanhMuc());
//    }
//
//    void fillcbbMaXuatXu() {
//        XuatXu xx = daoXX.selectByID(cbbMaXuatXu.getSelectedItem().toString());
//        lblNhaSX.setText(xx.getNhaSX() + " - " + xx.getNuocSX());
//    }
    void fillTableData() {
        model1 = (DefaultTableModel) tblThongTin.getModel();
        model1.setRowCount(0);
        try {
            List<SanPham> listSP = daoSP.selectAll();
            for (SanPham x : listSP) {
                model1.addRow(new Object[]{
                    x.getMaSp(), x.getTenSp(), x.getTenDanhMuc(), x.getNhaSX(), x.getNuocSX()
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void setSelectedComboboxTenSP(String cbbselected, JComboBox cbb) {
        for (int i = 0; i < cbb.getItemCount(); i++) {
            SanPham m = (SanPham) cbb.getItemAt(i);
            if (m != null) {
                if (cbbselected.trim().equals(m.getMaSp() + " - " + m.getTenSp())) {
                    cbb.setSelectedItem(m);
                }
            }
        }
    }

    public void setSelectedComboboxDM(String cbbselected, JComboBox cbb) {
        for (int i = 0; i < cbb.getItemCount(); i++) {
            DanhMuc m = (DanhMuc) cbb.getItemAt(i);
            if (m != null) {
                if (cbbselected.trim().equals(m.getTenDanhMuc())) {
                    cbb.setSelectedItem(m);
                }
            }
        }
    }

    public void setSelectedComboboxXX(String cbbselected, JComboBox cbb) {
        for (int i = 0; i < cbb.getItemCount(); i++) {
            XuatXu m = (XuatXu) cbb.getItemAt(i);
            if (m != null) {
                if (cbbselected.trim().equals(m.getNhaSX() + " - " + m.getNuocSX())) {
                    cbb.setSelectedItem(m);
                }
            }
        }
    }

    void clickTable() {
        txtMaSP.setText(model1.getValueAt(viTri, 0).toString());
        txtTenSP.setText(model1.getValueAt(viTri, 1).toString());
        setSelectedComboboxXX(tblThongTin.getValueAt(viTri, 3).toString() + " - " + tblThongTin.getValueAt(viTri, 4).toString(), cbbXuatXu);
        setSelectedComboboxDM(tblThongTin.getValueAt(viTri, 2).toString(), cbbDanhMuc);
        setSelectedComboboxTenSP(tblThongTin.getValueAt(viTri, 1).toString(), cbbMaSP);
    }

    void insertData() {
        SanPham sp = getFromSP();
        try {
            daoSP.insertData(sp);
            fillTableData();
            Msgbox.alert(this, "Thêm thành công!");
            refeshTextFiled();
        } catch (Exception e) {
            Msgbox.alert(this, "Thêm thất bại");
            e.printStackTrace();
        }
    }

    void updatetData() {
        SanPham sp = getFromSP();
        try {
            daoSP.updateData(sp);
            fillTableData();
            Msgbox.alert(this, "Cập nhật thành công!");
        } catch (Exception e) {
            e.printStackTrace();
            Msgbox.alert(this, "Cập nhật thất bại!");
        }
    }

    void refeshTextFiled() {
        txtMaSP.setText("");
        txtTenSP.setText("");
        cbbDanhMuc.setSelectedIndex(0);
        cbbFillDanhMuc.setSelectedIndex(0);
        cbbXuatXu.setSelectedIndex(0);
        fillTableData();
    }

//    void setFrom(SanPham sp) {
//        txtMaSP.setText(sp.getMaSp());
//        txtTenSP.setText(sp.getTenSp());
//    }
    SanPham getFromSP() {
        XuatXu cd = (XuatXu) cbbXuatXu.getSelectedItem();
        DanhMuc dm = (DanhMuc) cbbDanhMuc.getSelectedItem();
        SanPham sp = new SanPham();
        sp.setMaSp(txtMaSP.getText());
        sp.setMaDanhMuc(dm.getMaDanhMuc());
        sp.setTenSp(txtTenSP.getText());
        sp.setMaXX(cd.getMaXX());
        return sp;
    }

    public void timKiemSP() {
        model1.setRowCount(0);
        List<SanPham> list = daoSP.selectByTimKiem(txtTimKiem.getText());
        for (SanPham x : list) {
            model1.addRow(new Object[]{
                x.getMaSp(), x.getTenSp(), x.getTenDanhMuc(), x.getNhaSX(), x.getNuocSX()
            });
        }
    }

    // ------------------------------- SPCT ---------------------------------------
    boolean isValidateSPCT() {
        try {
            if (txtMaSPCT.getText().trim().equals("")) {
                Msgbox.alert(this, "Mã sản phẩm chi tiết không được để trống");
                return true;
            } else if (txtTenSPCT.getText().trim().equals("")) {
                Msgbox.alert(this, "Tên sản phẩm chi tiết không được để trống");
                return true;
            } else if (txtSoLuong.getText().trim().equals("")) {
                Msgbox.alert(this, "Số lượng không được để trống");
                return true;
            } else if (txtGiaNhap.getText().trim().equals("")) {
                Msgbox.alert(this, "Giá nhập không được để trống");
                return true;
            } else if (txtGiaBan.getText().trim().equals("")) {
                Msgbox.alert(this, "Giá bán không được để trống");
                return true;
            } else if (txtMaSPCT.getText().length() > 10) {
                Msgbox.alert(this, "Mã sản phẩm chi tiết tối đa 10 kí tự");
                return true;
            } else if (Integer.parseInt(txtSoLuong.getText()) < 0) {
                Msgbox.alert(this, "Số lượng sản phẩm phải lớn hơn 0");
                return true;
            } else if (Double.parseDouble(txtGiaNhap.getText()) < 0) {
                Msgbox.alert(this, "Giá nhập không được bé hơn 0");
                return true;
            } else if (Double.parseDouble(txtGiaBan.getText()) < 0) {
                Msgbox.alert(this, "Giá bán không được bé hơn 0");
                return true;
            } else if (AreaMoTa.getText().trim().equals("")) {
                Msgbox.alert(this, "Mô tả không được để trống");
                return true;
            } else {
                return false;
            }
        } catch (NumberFormatException e) {
            Msgbox.alert(this, "Số lượng và giá tiền phải là số");
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return true;
        }
    }

    boolean isCheckTrungSPCT() {
        boolean check = false;
        List<SanPhamChiTiet> list = daoSPCT.selectAll();
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getMaSPCT().equalsIgnoreCase(txtMaSPCT.getText())) {
                Msgbox.alert(this, "Mã sản phẩm chi tiết đã tồn tại");
                check = true;
                break;
            }
        }
        return check;
    }

    void addDataCbbTT() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbbTheTich.getModel();
        model.removeAllElements();
        List<TheTich> list = daoTT.selectAll();
        for (TheTich cd : list) {
            model.addElement(cd);
        }
    }

    void insertDataSPCT() {
        SanPhamChiTiet spct = getFromSPSPCT();
        try {
            daoSPCT.insertData(spct);
            fillTableSPCT_MaSP_Combobox();
            Msgbox.alert(this, "Thêm thành công!");
        } catch (Exception e) {
            Msgbox.alert(this, "Thêm thất bại");
            e.printStackTrace();
        }
    }

    void updatetDataSPCT() {
        SanPhamChiTiet spct = getFromSPSPCT();
        try {
            daoSPCT.updateData(spct);
            fillTableSPCT_MaSP_Combobox();
            Msgbox.alert(this, "Cập nhật thành công!");
        } catch (Exception e) {
            e.printStackTrace();
            Msgbox.alert(this, "Cập nhật thất bại!");
        }
    }

    void fillTableSPCT() {
        modelSPCT = (DefaultTableModel) tblSanPhamChiTiet.getModel();
        modelSPCT.setRowCount(0);
        try {
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            for (SanPhamChiTiet x : listSPCT) {
                modelSPCT.addRow(new Object[]{
                    x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), x.getGiaBan(), x.getTenMauSac(), x.getTheTich(),
                    x.getKichCo(), x.getKhoiLuong(), x.getTenChatLieu(), x.getTenImage(), x.getMoTa()
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    void FillCbbMaSP() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbbMaSP.getModel();
        model.removeAllElements();
        List<SanPham> list = daoSP.selectAll();
        for (SanPham cd : list) {
            model.addElement(cd);
        }
    }

    void fillTableSPCT_MaSP() {
        modelSPCT = (DefaultTableModel) tblSanPhamChiTiet.getModel();
        modelSPCT.setRowCount(0);
        try {
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectBySPCT(txtMaSP.getText());
            for (SanPhamChiTiet x : listSPCT) {
                modelSPCT.addRow(new Object[]{
                    x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), x.getGiaNhap(), x.getGiaBan(),
                    x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich(),
                    x.getKichCo(), x.getKhoiLuong(), x.getTenChatLieu(), x.getTenImage(), x.getMoTa()
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    void fillTableSPCT_MaSP_Combobox() {
        modelSPCT = (DefaultTableModel) tblSanPhamChiTiet.getModel();
        modelSPCT.setRowCount(0);
        try {
            SanPham sp = (SanPham) cbbMaSP.getSelectedItem();
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectBySPCT(sp.getMaSp());
            for (SanPhamChiTiet x : listSPCT) {
                modelSPCT.addRow(new Object[]{
                    x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), x.getGiaNhap(), x.getGiaBan(),
                    x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich(),
                    x.getKichCo(), x.getKhoiLuong(), x.getTenChatLieu(), x.getTenImage(), x.getMoTa()
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    void fillTableSPCT_NhomS() {
        modelSPCT = (DefaultTableModel) tblSanPhamChiTiet.getModel();
        modelSPCT.setRowCount(0);
        try {
            SanPham sp = (SanPham) cbbMaSP.getSelectedItem();
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectBySPCT(sp.getMaSp());
            for (SanPhamChiTiet x : listSPCT) {
                modelSPCT.addRow(new Object[]{
                    x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), x.getGiaNhap(), x.getGiaBan(),
                    x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich(),
                    x.getKichCo(), x.getKhoiLuong(), x.getTenChatLieu(), x.getTenImage(), x.getMoTa()
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    void clickOpenSPCT() {
        if (viTri >= 0) {
            pnTongQuat.setSelectedIndex(1);
            fillTableSPCT();
            fillTableSPCT_MaSP();
        } else {
            Msgbox.alert(this, "Vui lòng chọn sản phẩm!");
        }
    }

    SanPhamChiTiet getFromSPSPCT() {
        TheTich tt = (TheTich) cbbTheTich.getSelectedItem();
        KichThuoc kt = (KichThuoc) cbbKichThuoc.getSelectedItem();
        KhoiLuong kl = (KhoiLuong) cbbKhoiLuong.getSelectedItem();
        ChatLieu cl = (ChatLieu) cbbChatLieu.getSelectedItem();
        MauSac ms = (MauSac) cbbMauSac.getSelectedItem();
        Image img = (Image) cbbIMG.getSelectedItem();

        // ----------------------------------------------------------------------
        SanPhamChiTiet spct = new SanPhamChiTiet();
        SanPham sp = (SanPham) cbbMaSP.getSelectedItem();
        spct.setMaSp(sp.getMaSp());
        spct.setMaSPCT(txtMaSPCT.getText());
        spct.setTenSPCT(txtTenSPCT.getText());
        spct.setSoLuong(Integer.parseInt(txtSoLuong.getText()));
        spct.setGiaNhap(Float.parseFloat(txtGiaNhap.getText()));
        spct.setGiaBan(Float.parseFloat(txtGiaBan.getText()));
        if (rdoPhoBien.isSelected()) {
            spct.setNhomPhoBien(true);
        } else {
            spct.setNhomPhoBien(false);
        }
        spct.setMaMauSac(ms.getMaMauSac());
        spct.setMaTheTich(tt.getMaTheTich());
        spct.setMaKL(kl.getMaKL());
        spct.setMaKichThuoc(kt.getMaKichThuoc());
        spct.setMaChatLieu(cl.getMaChatLieu());
        spct.setMaImage(img.getMaImage());
        spct.setMoTa(AreaMoTa.getText());
        return spct;
    }

//    void setFrom(SanPhamChiTiet spct) {
//        txtMaSPCT.setText(spct.getMaSPCT());
//        txtTenSPCT.setText(spct.getTenSPCT());
//        txtSoLuong.setText(String.valueOf(spct.getSoLuong()));
//        txtGiaNhap.setText(String.valueOf(spct.getGiaNhap()));
//        txtGiaBan.setText(String.valueOf(spct.getGiaBan()));
//        if (spct.getTenImage() != null) {
//            lblHinhAnh.setToolTipText(spct.getTenImage());
//            lblHinhAnh.setIcon(XImage.read(spct.getTenImage()));
//        }
//        if (spct.isNhomPhoBien() == true) {
//            rdoPhoBien.setSelected(true);
//        } else {
//            rdoKhongPhoBien.setSelected(true);
//        }
//        AreaMoTa.setText(spct.getMoTa());
//        cbbIMG.setSelectedItem(spct.getTenImage());
//        setSelectedComboboxTT(tblSanPhamChiTiet.getValueAt(viTri, 7).toString(), cbbTheTich);
//        setSelectedComboboxKT(tblSanPhamChiTiet.getValueAt(viTri, 8).toString(), cbbKichThuoc);
//        setSelectedComboboxKL(tblSanPhamChiTiet.getValueAt(viTri, 9).toString(), cbbKhoiLuong);
//        setSelectedComboboxCL(tblSanPhamChiTiet.getValueAt(viTri, 10).toString(), cbbChatLieu);
//        setSelectedComboboxMS(tblSanPhamChiTiet.getValueAt(viTri, 6).toString(), cbbMauSac);
//        setSelectedComboboxIMG(tblSanPhamChiTiet.getValueAt(viTri, 11).toString(), cbbIMG);
//    }
    void clickTabelSPCT() {
        vitriSPCT = tblSanPhamChiTiet.getSelectedRow();
        txtMaSPCT.setText(tblSanPhamChiTiet.getValueAt(vitriSPCT, 0).toString());
        txtTenSPCT.setText(tblSanPhamChiTiet.getValueAt(vitriSPCT, 1).toString());
        txtSoLuong.setText(tblSanPhamChiTiet.getValueAt(vitriSPCT, 2).toString());
        txtGiaNhap.setText(tblSanPhamChiTiet.getValueAt(vitriSPCT, 3).toString());
        txtGiaBan.setText(tblSanPhamChiTiet.getValueAt(vitriSPCT, 4).toString());
        String npb = tblSanPhamChiTiet.getValueAt(vitriSPCT, 5).toString();
        if (npb.equals("Phổ biến")) {
            rdoPhoBien.setSelected(true);
        } else {
            rdoKhongPhoBien.setSelected(true);
        }
        AreaMoTa.setText(tblSanPhamChiTiet.getValueAt(vitriSPCT, 12).toString());
        setSelectedComboboxTT(tblSanPhamChiTiet.getValueAt(vitriSPCT, 7).toString() + " Lít", cbbTheTich);
        setSelectedComboboxKT(tblSanPhamChiTiet.getValueAt(vitriSPCT, 8).toString() + " - " + "CM", cbbKichThuoc);
        setSelectedComboboxKL(tblSanPhamChiTiet.getValueAt(vitriSPCT, 9).toString() + " - " + "KG", cbbKhoiLuong);
        setSelectedComboboxCL(tblSanPhamChiTiet.getValueAt(vitriSPCT, 10).toString(), cbbChatLieu);
        setSelectedComboboxMS(tblSanPhamChiTiet.getValueAt(vitriSPCT, 6).toString(), cbbMauSac);
        setSelectedComboboxIMG(tblSanPhamChiTiet.getValueAt(vitriSPCT, 11).toString(), cbbIMG);
    }

    private void timKiemSPCT() {
        modelSPCT.setRowCount(0);
        List<SanPhamChiTiet> list = daoSPCT.selectByTimKiem(txtTimKiemSPCT.getText());
        for (SanPhamChiTiet x : list) {
            modelSPCT.addRow(new Object[]{
                x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), x.getGiaNhap(), x.getGiaBan(),
                x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich(),
                x.getKichCo(), x.getKhoiLuong(), x.getTenChatLieu(), x.getTenImage(), x.getMoTa()
            });
        }
//        String txtSearch = txtTimKiem.getText();
//        for (int i = 0; i < tblSanPhamChiTiet.getRowCount(); i++) {
//            String maSPCT = tblSanPhamChiTiet.getValueAt(i, 0).toString();
//            if (txtSearch.equals(maSPCT)) {
//                SanPhamChiTiet spct = new SanPhamChiTiet();
//                spct.setMaSPCT(tblSanPhamChiTiet.getValueAt(i, 0).toString());
//                spct.setTenSPCT(tblSanPhamChiTiet.getValueAt(i, 0).toString());
//                DefaultTableModel model = (DefaultTableModel) tblSanPhamChiTiet.getModel();
//                model.addRow(new Object[]{
//                    spct.getMaSPCT(), spct.getTenSPCT()
//                });
//            }
//        }
    }

//    private void edit() {
//        String maSPCT = (String) tblSanPhamChiTiet.getValueAt(row, 0);
//        SanPhamChiTiet spct = daoSPCT.selectByID(maSPCT);
//        setFrom(spct);
//    }
    void chonAnh() {
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            XImage.save(file);
            ImageIcon icon = XImage.read(file.getName());
            lblHinhAnh.setIcon(icon);
            lblHinhAnh.setToolTipText(file.getName());
        }
    }

    private void addDataCbbKL() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbbKhoiLuong.getModel();
        model.removeAllElements();
        List<KhoiLuong> list = daoKL.selectAll();
        for (KhoiLuong cd : list) {
            model.addElement(cd);
        }
    }

    private void addDataCbbKT() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbbKichThuoc.getModel();
        model.removeAllElements();
        List<KichThuoc> list = daoKT.selectAll();
        for (KichThuoc cd : list) {
            model.addElement(cd);
        }
    }

    private void addDataCbbCL() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbbChatLieu.getModel();
        model.removeAllElements();
        List<ChatLieu> list = daoCL.selectAll();
        for (ChatLieu cd : list) {
            model.addElement(cd);
        }
    }

    private void addDataCbbMS() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbbMauSac.getModel();
        model.removeAllElements();
        List<MauSac> list = daoMS.selectAll();
        for (MauSac cd : list) {
            model.addElement(cd);
        }
    }

    private void addDataCbbIMG() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbbIMG.getModel();
        model.removeAllElements();
        List<Image> list = daoIMG.selectAll();
        for (Image cd : list) {
            model.addElement(cd);
        }
    }

    void clearFromSPCT() {
        cbbTheTich.setSelectedIndex(0);
        cbbKhoiLuong.setSelectedIndex(0);
        cbbChatLieu.setSelectedIndex(0);
        cbbMauSac.setSelectedIndex(0);
        cbbKichThuoc.setSelectedIndex(0);
        cbbIMG.setSelectedIndex(0);
        txtMaSPCT.setText("");
        txtTenSPCT.setText("");
        txtSoLuong.setText("");
        txtGiaNhap.setText("");
        txtGiaBan.setText("");
        AreaMoTa.setText("");
        rdoPhoBien.setSelected(true);
    }

    public void setSelectedComboboxTT(String cbbselected, JComboBox cbb) {
        for (int i = 0; i < cbb.getItemCount(); i++) {
            TheTich m = (TheTich) cbb.getItemAt(i);
            if (m != null) {
                if (cbbselected.trim().equals(m.getTheTich() + " Lít")) {
                    cbb.setSelectedItem(m);
                }
            }
        }
    }

    public void setSelectedComboboxKT(String cbbselected, JComboBox cbb) {
        for (int i = 0; i < cbb.getItemCount(); i++) {
            KichThuoc m = (KichThuoc) cbb.getItemAt(i);
            if (m != null) {
                if (cbbselected.trim().equals(m.getChieuDai() + " - " + m.getChieuRong()
                        + " - " + m.getChieuCao() + " - " + m.getMaDV())) {
                    cbb.setSelectedItem(m);
                }
            }
        }
    }

    public void setSelectedComboboxKL(String cbbselected, JComboBox cbb) {
        for (int i = 0; i < cbb.getItemCount(); i++) {
            KhoiLuong m = (KhoiLuong) cbb.getItemAt(i);
            if (m != null) {
                if (cbbselected.trim().equals(m.getKhoiLuong() + " - " + m.getMaDV())) {
                    cbb.setSelectedItem(m);
                }
            }
        }
    }

    public void setSelectedComboboxCL(String cbbselected, JComboBox cbb) {
        for (int i = 0; i < cbb.getItemCount(); i++) {
            ChatLieu m = (ChatLieu) cbb.getItemAt(i);
            if (m != null) {
                if (cbbselected.trim().equals(m.getChatLieu())) {
                    cbb.setSelectedItem(m);
                }
            }
        }
    }

    public void setSelectedComboboxMS(String cbbselected, JComboBox cbb) {
        for (int i = 0; i < cbb.getItemCount(); i++) {
            MauSac m = (MauSac) cbb.getItemAt(i);
            if (m != null) {
                if (cbbselected.trim().equals(m.getTenMauSac())) {
                    cbb.setSelectedItem(m);
                }
            }
        }
    }

    public void setSelectedComboboxIMG(String cbbselected, JComboBox cbb) {
        for (int i = 0; i < cbb.getItemCount(); i++) {
            Image m = (Image) cbb.getItemAt(i);
            if (m != null) {
                if (cbbselected.trim().equals(m.getTenHinh())) {
                    cbb.setSelectedItem(m);
                }
            }
        }
    }

    public void XuatFileExcel() {
        try {
            XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFSheet spreadsheet = workbook.createSheet("SPCT");

            XSSFRow row = null;
            Cell cell = null;

            row = spreadsheet.createRow((short) 2);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("DANH SÁCH SẢN PHẨM CHI TIẾT");

            row = spreadsheet.createRow((short) 3);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("STT");
            cell = row.createCell(1, CellType.STRING);
            cell.setCellValue("Mã SPCT");
            cell = row.createCell(2, CellType.STRING);
            cell.setCellValue("Tên SPCT");
            cell = row.createCell(3, CellType.STRING);
            cell.setCellValue("Số Lượng");
            cell = row.createCell(4, CellType.STRING);
            cell.setCellValue("Giá Nhập");
            cell = row.createCell(5, CellType.STRING);
            cell.setCellValue("Giá Bán");
            cell = row.createCell(6, CellType.STRING);
            cell.setCellValue("Nhóm Hàng");
            cell = row.createCell(7, CellType.STRING);
            cell.setCellValue("Màu Sắc");
            cell = row.createCell(8, CellType.STRING);
            cell.setCellValue("Thể Tích");
            cell = row.createCell(9, CellType.STRING);
            cell.setCellValue("Kích Thước");
            cell = row.createCell(10, CellType.STRING);
            cell.setCellValue("Chất Liệu");
            cell = row.createCell(11, CellType.STRING);
            cell.setCellValue("Hình Ảnh");
            cell = row.createCell(12, CellType.STRING);
            cell.setCellValue("Mô Tả");

            // tạo list để lấy ra tất cả dữ liệu
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            // tạo vòng for để set giữ liệu cho từng hàng
            for (int i = 0; i < listSPCT.size(); i++) {
                SanPhamChiTiet SPCT = listSPCT.get(i);
                row = spreadsheet.createRow((short) 4 + i);
                row.setHeight((short) 400);
                row.createCell(0).setCellValue(i + 1);
                row.createCell(1).setCellValue(SPCT.getMaSPCT());
                row.createCell(2).setCellValue(SPCT.getTenSPCT());
                row.createCell(3).setCellValue(SPCT.getSoLuong());
                row.createCell(4).setCellValue(SPCT.getGiaNhap());
                row.createCell(5).setCellValue(SPCT.getGiaBan());
                row.createCell(6).setCellValue(SPCT.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến");
                row.createCell(7).setCellValue(SPCT.getTenMauSac());
                row.createCell(8).setCellValue(SPCT.getTheTich());
                row.createCell(9).setCellValue(SPCT.getKichCo());
                row.createCell(10).setCellValue(SPCT.getTenChatLieu());
                row.createCell(11).setCellValue(SPCT.getTenImage());
                row.createCell(12).setCellValue(SPCT.getMoTa());
            }

            FileOutputStream out = new FileOutputStream(new File("C:\\Users\\nguyen viet hien\\OneDrive\\Máy tính\\backupCode\\Dien_May_Do\\src\\ExcelExport\\SPCT.xlsx"));
            workbook.write(out);
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
