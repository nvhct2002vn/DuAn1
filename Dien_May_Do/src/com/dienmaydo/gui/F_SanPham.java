/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dienmaydo.gui;

import com.dienmaydo.entity.ChatLieu;
import com.dienmaydo.entity.DanhMuc;
import com.dienmaydo.entity.DonViTinh;
import com.dienmaydo.entity.Image;
import com.dienmaydo.entity.KhoiLuong;
import com.dienmaydo.entity.KichThuoc;
import com.dienmaydo.entity.MauSac;
import com.dienmaydo.entity.SanPham;
import com.dienmaydo.entity.SanPhamChiTiet;
import com.dienmaydo.entity.TheTich;
import com.dienmaydo.entity.XuatXu;
import com.dienmaydo.service.ChatLieuService;
import com.dienmaydo.service.DanhMucService;
import com.dienmaydo.service.DonViTinhService;
import com.dienmaydo.service.ImageService;
import com.dienmaydo.service.KhoiLuongService;
import com.dienmaydo.service.KichThuocService;
import com.dienmaydo.service.MauSacService;
import com.dienmaydo.service.SanPhamChiTietService;
import com.dienmaydo.service.SanPhamService;
import com.dienmaydo.service.TheTichService;
import com.dienmaydo.service.XuatXuService;
import com.dienmaydo.utils.Auth;
import com.dienmaydo.utils.Msgbox;
import com.dienmaydo.utils.XImage;
import com.dienmaydo.utils.XMoney;
import java.awt.CardLayout;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Nguyễn Viết Hiên
 */
public class F_SanPham extends javax.swing.JInternalFrame {

    /**
     * Creates new form HangHoaJfame
     */
    SanPhamService daoSP = new SanPhamService();
//    List<SanPham> _listSP = daoSP.selectAll();

    XuatXuService daoXX = new XuatXuService();
//    List<XuatXu> _listXX = daoXX.selectAll();

    DanhMucService daoDM = new DanhMucService();
//    List<DanhMuc> _listDM = daoDM.selectAll();

    SanPhamChiTietService daoSPCT = new SanPhamChiTietService();
    List<SanPhamChiTiet> _listSPCT = daoSPCT.selectAll();
    
    MauSacService daoMS = new MauSacService();
//    List<MauSac> _listMS = daoMS.selectAll();

    TheTichService daoTT = new TheTichService();
//    List<TheTich> _listTT = daoTT.selectAll();

    KichThuocService daoKT = new KichThuocService();
//    List<KichThuoc> _listKT = daoKT.selectAll();

    KhoiLuongService daoKL = new KhoiLuongService();
//    List<KhoiLuong> _listKL = daoKL.selectAll();

    DonViTinhService daoDVT = new DonViTinhService();
//    List<DonViTinh> _listDVT = daoDVT.selectAll();

    ChatLieuService daoCL = new ChatLieuService();
//    List<ChatLieu> _listCL = daoCL.selectAll();

    ImageService daoIMG = new ImageService();
//    List<Image> _listIMG = daoIMG.selectAll();

    DefaultTableModel model1, modelSPCT;
    int viTri = 0;
    int row = 0;
    int vitriSPCT;
    int dieuKien;
    boolean nhomPhoBien;
    boolean trangThaiSP;
    boolean trangThaiThuocTinh = false;
    CardLayout card, cardTB; // khai báo cardlayout
    String ganText = "";

    /**
     * Creates new form SanPhamInterJfame
     */
    public F_SanPham() {
        initComponents();
        setResizable(false);
        card = (CardLayout) pnCardGoc.getLayout(); // gét panel gốc
        card.show(pnCardGoc, "card1"); // pnCardGoc là Variable name panel gốc, card1 là card name => mở from lên sẽ mở card1

        cardTB = (CardLayout) pnCardGocTable.getLayout(); // gét panel gốc
        cardTB.show(pnCardGocTable, "cardTB1"); // pnCardGoc là Variable name panel gốc, card1 là card name => mở from lên sẽ mở card1
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null);
        addDataCbbXX();
        addDataCbbDM();
        addDataCbbTT();
        addDataCbbKT();
        addDataCbbKL();
        addDataCbbCL();
        addDataCbbMS();
        addDataCbbIMG();
        addDataCbbDVT();
        FillCbbMaSP();
        FillCbbMaSPFIll();
        addDataFillCbbDM();
        addDataFillCbbXX();
        fillTableChatlieu();
        fillTableData();
        fillTableSPCT();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupNhom = new javax.swing.ButtonGroup();
        btnGroupSxNhom = new javax.swing.ButtonGroup();
        btnGroupSLHangTon = new javax.swing.ButtonGroup();
        btnGroupThuocTinhSP = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        pnTongQuat = new javax.swing.JTabbedPane();
        pnSanPham = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtMaSP = new javax.swing.JTextField();
        txtTenSP = new javax.swing.JTextField();
        cbbDanhMuc = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        cbbXuatXu = new javax.swing.JComboBox<>();
        jLabel35 = new javax.swing.JLabel();
        cbbTrangThaiSP = new javax.swing.JComboBox<>();
        jPanel14 = new javax.swing.JPanel();
        btnChiTietSP = new javax.swing.JButton();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnLamMoi = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        cbbFillDanhMuc = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        cbbFillXuatXu = new javax.swing.JComboBox<>();
        jPanel13 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        txtTimKiem = new javax.swing.JTextField();
        jPanel23 = new javax.swing.JPanel();
        jLabel40 = new javax.swing.JLabel();
        cbbFillTrangThaiSP = new javax.swing.JComboBox<>();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSanPham = new javax.swing.JTable();
        pnSPCT = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        txtGiaBan = new javax.swing.JTextField();
        txtGiaNhap = new javax.swing.JTextField();
        txtSoLuong = new javax.swing.JTextField();
        txtTenSPCT = new javax.swing.JTextField();
        txtMaSPCT = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        AreaMoTa = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblHinhAnh = new javax.swing.JLabel();
        cbbIMG = new javax.swing.JComboBox<>();
        cbbTheTich = new javax.swing.JComboBox<>();
        cbbKichThuoc = new javax.swing.JComboBox<>();
        cbbKhoiLuong = new javax.swing.JComboBox<>();
        cbbMauSac = new javax.swing.JComboBox<>();
        cbbChatLieu = new javax.swing.JComboBox<>();
        jLabel31 = new javax.swing.JLabel();
        cbbTrangThaiSPCT = new javax.swing.JComboBox<>();
        cbbNhomPhoBien = new javax.swing.JComboBox<>();
        jPanel15 = new javax.swing.JPanel();
        btnThemSPCT = new javax.swing.JButton();
        btnSuaSPCT = new javax.swing.JButton();
        btnLamMoiSPCT = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        cbbMaSP = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        cbbFillMaSP = new javax.swing.JComboBox<>();
        jPanel6 = new javax.swing.JPanel();
        txtTimKiemSPCT = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        cbbDieuKienTimKiem = new javax.swing.JComboBox<>();
        cbbLoaiGia = new javax.swing.JComboBox<>();
        jLabel32 = new javax.swing.JLabel();
        txtTimKiemGiaBan = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        cbbLocChiTietSanPham = new javax.swing.JComboBox<>();
        jLabel33 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSanPhamChiTiet = new javax.swing.JTable();
        pnThuocTinh = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        pnCardGoc = new javax.swing.JPanel();
        pnCard1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTTMaThuocTinh = new javax.swing.JTextField();
        txtTTTenThuocTinh = new javax.swing.JTextField();
        pnCard2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        txtChieuCao = new javax.swing.JTextField();
        txtChieuRong = new javax.swing.JTextField();
        txtChieuDai = new javax.swing.JTextField();
        txtMaKT = new javax.swing.JTextField();
        pnCard3 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        txtTTNhaSanXuat = new javax.swing.JTextField();
        txtTTNuocSanXuat = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        txtTTMaXuatXu = new javax.swing.JTextField();
        lblTTHinhAnh = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        btnTTThem = new javax.swing.JButton();
        btnTTSua = new javax.swing.JButton();
        btnLamMoiTT = new javax.swing.JButton();
        jPanel22 = new javax.swing.JPanel();
        rdTTHinhAnh = new javax.swing.JRadioButton();
        rdTTXuatXu = new javax.swing.JRadioButton();
        rdTTMauSac = new javax.swing.JRadioButton();
        rdTTChatLieu = new javax.swing.JRadioButton();
        cbbTTDonViTinh = new javax.swing.JComboBox<>();
        rdTTKichThuoc = new javax.swing.JRadioButton();
        rdTTKhoiLuong = new javax.swing.JRadioButton();
        rdTTTheTich = new javax.swing.JRadioButton();
        jLabel37 = new javax.swing.JLabel();
        pnCardGocTable = new javax.swing.JPanel();
        pnCardTB1 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblTTThuocTinh = new javax.swing.JTable();
        pnCardTB2 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblTTKichThuoc = new javax.swing.JTable();
        pnCardTB3 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tbTTXuatXu = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(1146, 768));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1146, 768));

        pnTongQuat.setPreferredSize(new java.awt.Dimension(1146, 768));

        pnSanPham.setBackground(new java.awt.Color(255, 255, 255));
        pnSanPham.setPreferredSize(new java.awt.Dimension(1146, 768));

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin sản phẩm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Mã sản phẩm:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Tên sản phẩm:");

        txtMaSP.setEditable(false);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel18.setText("Danh mục:");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel19.setText("Xuất xứ:");

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel35.setText("Trạng thái:");

        cbbTrangThaiSP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Đang kinh doanh", "Ngừng kinh doanh" }));
        cbbTrangThaiSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbTrangThaiSPActionPerformed(evt);
            }
        });

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));
        jPanel14.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnChiTietSP.setBackground(new java.awt.Color(255, 204, 0));
        btnChiTietSP.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnChiTietSP.setForeground(new java.awt.Color(51, 51, 51));
        btnChiTietSP.setText("Chi tiết sản phẩm");
        btnChiTietSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChiTietSPActionPerformed(evt);
            }
        });

        btnThem.setBackground(new java.awt.Color(255, 204, 0));
        btnThem.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnThem.setForeground(new java.awt.Color(51, 51, 51));
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnSua.setBackground(new java.awt.Color(255, 204, 0));
        btnSua.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSua.setForeground(new java.awt.Color(51, 51, 51));
        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnLamMoi.setBackground(new java.awt.Color(255, 204, 0));
        btnLamMoi.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnLamMoi.setForeground(new java.awt.Color(51, 51, 51));
        btnLamMoi.setText("Làm mới");
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnChiTietSP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLamMoi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSua, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnThem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnThem)
                .addGap(22, 22, 22)
                .addComponent(btnSua)
                .addGap(18, 18, 18)
                .addComponent(btnLamMoi)
                .addGap(18, 18, 18)
                .addComponent(btnChiTietSP)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(49, 49, 49)
                        .addComponent(txtTenSP, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(54, 54, 54)
                        .addComponent(txtMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel35)
                    .addComponent(jLabel19)
                    .addComponent(jLabel18))
                .addGap(36, 36, 36)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbbDanhMuc, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbbXuatXu, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbbTrangThaiSP, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel18)
                        .addComponent(cbbDanhMuc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbXuatXu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addGap(34, 34, 34)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtTenSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbbTrangThaiSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel35)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lọc sản phẩm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cbbFillDanhMuc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbFillDanhMucItemStateChanged(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel22.setText("Danh mục:");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cbbFillDanhMuc, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(jLabel22)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel22)
                .addGap(18, 18, 18)
                .addComponent(cbbFillDanhMuc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));
        jPanel12.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel34.setText("Xuất xứ:");

        cbbFillXuatXu.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbFillXuatXuItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cbbFillXuatXu, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jLabel34)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel34)
                .addGap(18, 18, 18)
                .addComponent(cbbFillXuatXu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));
        jPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Tìm kiếm sản phẩm:");

        txtTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jLabel11))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel23.setBackground(new java.awt.Color(255, 255, 255));
        jPanel23.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel40.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel40.setText("Trạng thái:");

        cbbFillTrangThaiSP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Đang kinh doanh", "Ngừng kinh doanh" }));
        cbbFillTrangThaiSP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbFillTrangThaiSPItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(jLabel40)
                .addContainerGap(115, Short.MAX_VALUE))
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbbFillTrangThaiSP, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel40)
                .addGap(18, 18, 18)
                .addComponent(cbbFillTrangThaiSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel10Layout.createSequentialGroup()
                        .addComponent(jPanel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(2, 2, 2))
        );

        jPanel16.setBackground(new java.awt.Color(255, 255, 255));
        jPanel16.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblSanPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sản phẩm", "Tên sản phẩm", "Tên danh mục", "Nhà sản xuất", "Nước sản xuất", "Trạng thái"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSanPham.setRowHeight(20);
        tblSanPham.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSanPhamMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblSanPham);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnSanPhamLayout = new javax.swing.GroupLayout(pnSanPham);
        pnSanPham.setLayout(pnSanPhamLayout);
        pnSanPhamLayout.setHorizontalGroup(
            pnSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSanPhamLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnSanPhamLayout.setVerticalGroup(
            pnSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSanPhamLayout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnTongQuat.addTab("Sản phẩm", pnSanPham);

        pnSPCT.setBackground(new java.awt.Color(255, 255, 255));
        pnSPCT.setPreferredSize(new java.awt.Dimension(1146, 768));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin sản phẩm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Mã sản phẩm chi tiết:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Tên sản phẩm chi tiết:");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setText("Số lượng:");

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel23.setText("Giá nhập:");

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel24.setText("Giá bán:");

        txtGiaNhap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGiaNhapActionPerformed(evt);
            }
        });

        txtMaSPCT.setEditable(false);

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel21.setText("Nhóm phổ biến:");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setText("Mô tả:");

        AreaMoTa.setColumns(20);
        AreaMoTa.setRows(5);
        jScrollPane3.setViewportView(AreaMoTa);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Thể tích:");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("Kích thước:");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText("Khối lượng:");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setText("Chất liệu:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Màu:");

        lblHinhAnh.setBackground(new java.awt.Color(255, 255, 255));
        lblHinhAnh.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHinhAnh.setForeground(new java.awt.Color(51, 51, 51));
        lblHinhAnh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHinhAnh.setText("Hình ảnh");
        lblHinhAnh.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cbbIMG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbIMGActionPerformed(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel31.setText("Trạng thái:");

        cbbTrangThaiSPCT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Đang kinh doanh", "Ngừng kinh doanh" }));

        cbbNhomPhoBien.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Phổ biến", "Không phổ biến" }));

        jPanel15.setBackground(new java.awt.Color(255, 255, 255));
        jPanel15.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnThemSPCT.setBackground(new java.awt.Color(255, 204, 0));
        btnThemSPCT.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnThemSPCT.setForeground(new java.awt.Color(51, 51, 51));
        btnThemSPCT.setText("Thêm");
        btnThemSPCT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemSPCTActionPerformed(evt);
            }
        });

        btnSuaSPCT.setBackground(new java.awt.Color(255, 204, 0));
        btnSuaSPCT.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSuaSPCT.setForeground(new java.awt.Color(51, 51, 51));
        btnSuaSPCT.setText("Sửa");
        btnSuaSPCT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaSPCTActionPerformed(evt);
            }
        });

        btnLamMoiSPCT.setBackground(new java.awt.Color(255, 204, 0));
        btnLamMoiSPCT.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnLamMoiSPCT.setForeground(new java.awt.Color(51, 51, 51));
        btnLamMoiSPCT.setText("Làm mới");
        btnLamMoiSPCT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiSPCTActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 204, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setForeground(new java.awt.Color(51, 51, 51));
        jButton1.setText("Xuất File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLamMoiSPCT, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSuaSPCT, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThemSPCT, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jPanel15Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnLamMoiSPCT, btnSuaSPCT, btnThemSPCT, jButton1});

        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(btnThemSPCT)
                .addGap(33, 33, 33)
                .addComponent(btnSuaSPCT)
                .addGap(33, 33, 33)
                .addComponent(btnLamMoiSPCT)
                .addGap(33, 33, 33)
                .addComponent(jButton1)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanel15Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnLamMoiSPCT, btnSuaSPCT, btnThemSPCT, jButton1});

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel36.setText("Hình ảnh");

        jLabel38.setText("VND");

        jLabel39.setText("VND");

        jLabel41.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel41.setText("Sản phẩm:");

        cbbMaSP.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cbbMaSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbMaSPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel31)
                    .addComponent(jLabel41))
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtGiaNhap, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel38)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cbbMaSP, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbbTrangThaiSPCT, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbbNhomPhoBien, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtMaSPCT, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtTenSPCT, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                    .addComponent(txtSoLuong)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(txtGiaBan, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel39)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel15)
                            .addComponent(jLabel14)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbbTheTich, 0, 140, Short.MAX_VALUE)
                            .addComponent(cbbKhoiLuong, 0, 91, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(cbbKichThuoc, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbbChatLieu, javax.swing.GroupLayout.Alignment.LEADING, 0, 91, Short.MAX_VALUE))
                            .addComponent(cbbMauSac, 0, 91, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbbIMG, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblHinhAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(jLabel36))))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbbChatLieu, cbbKhoiLuong, cbbMauSac, cbbTheTich, txtMaSPCT, txtSoLuong, txtTenSPCT});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtMaSPCT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtTenSPCT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtGiaNhap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel38)
                            .addComponent(jLabel23))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(txtGiaBan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel39))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(cbbNhomPhoBien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel31)
                            .addComponent(cbbTrangThaiSPCT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(cbbIMG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblHinhAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel12)
                                            .addComponent(cbbTheTich, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel36)
                                            .addComponent(jLabel41)
                                            .addComponent(cbbMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(16, 16, 16)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel13)
                                            .addComponent(cbbKichThuoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel15)
                                            .addComponent(cbbChatLieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel14)
                                            .addComponent(cbbKhoiLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(15, 15, 15)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel9)
                                            .addComponent(cbbMauSac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel17)
                                        .addGap(42, 54, Short.MAX_VALUE))
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lọc sản phẩm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel20.setText("Sản phẩm:");

        cbbFillMaSP.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cbbFillMaSP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbFillMaSPItemStateChanged(evt);
            }
        });
        cbbFillMaSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbFillMaSPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jLabel20)
                .addContainerGap(56, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbbFillMaSP, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbbFillMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtTimKiemSPCT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemSPCTKeyReleased(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Tìm kiếm sản phẩm:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTimKiemSPCT)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel10)
                .addGap(10, 10, 10)
                .addComponent(txtTimKiemSPCT)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cbbDieuKienTimKiem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<", ">", ">=", "<=", "=" }));
        cbbDieuKienTimKiem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbDieuKienTimKiemItemStateChanged(evt);
            }
        });

        cbbLoaiGia.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cbbLoaiGia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Giá nhập", "Giá bán" }));
        cbbLoaiGia.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbLoaiGiaItemStateChanged(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel32.setText("Điều kiện giá:");

        txtTimKiemGiaBan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemGiaBanKeyReleased(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel27.setText("Giá tiền:");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(cbbDieuKienTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbbLoaiGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtTimKiemGiaBan, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel27)
                        .addGap(60, 60, 60))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(jLabel27))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbDieuKienTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbbLoaiGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTimKiemGiaBan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cbbDieuKienTimKiem, cbbLoaiGia});

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cbbLocChiTietSanPham.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cbbLocChiTietSanPham.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Không phổ biến", "Phổ biến", "Vượt định mức", "Dưới định mức", "Còn hàng", "Hết hàng", "Đang kinh doanh", "Ngừng kinh doanh" }));
        cbbLocChiTietSanPham.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbLocChiTietSanPhamItemStateChanged(evt);
            }
        });
        cbbLocChiTietSanPham.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbLocChiTietSanPhamActionPerformed(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel33.setText("Tình trạng sản phẩm:");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbbLocChiTietSanPham, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbbLocChiTietSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel17.setBackground(new java.awt.Color(255, 255, 255));
        jPanel17.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblSanPhamChiTiet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sản phẩm chi tiết", "Tên sản phẩm chi tiết", "Số lượng tồn", "Giá nhập", "Giá bán", "Nhóm", "Màu", "Thể tích", "Kích thước", "Khối lượng", "Chất liệu", "Hình ảnh", "Mô tả", "Trạng thái"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSanPhamChiTiet.setRowHeight(20);
        tblSanPhamChiTiet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSanPhamChiTietMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblSanPhamChiTiet);

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnSPCTLayout = new javax.swing.GroupLayout(pnSPCT);
        pnSPCT.setLayout(pnSPCTLayout);
        pnSPCTLayout.setHorizontalGroup(
            pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSPCTLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnSPCTLayout.setVerticalGroup(
            pnSPCTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSPCTLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnTongQuat.addTab("Sản phẩm chi tiết", pnSPCT);

        pnThuocTinh.setBackground(new java.awt.Color(255, 255, 255));
        pnThuocTinh.setPreferredSize(new java.awt.Dimension(1146, 768));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thuộc tính", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        pnCardGoc.setBackground(new java.awt.Color(0, 204, 255));
        pnCardGoc.setLayout(new java.awt.CardLayout());

        pnCard1.setBackground(new java.awt.Color(255, 255, 255));
        pnCard1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Mã thuộc tính:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Tên thuộc tính:");

        txtTTMaThuocTinh.setEditable(false);

        javax.swing.GroupLayout pnCard1Layout = new javax.swing.GroupLayout(pnCard1);
        pnCard1.setLayout(pnCard1Layout);
        pnCard1Layout.setHorizontalGroup(
            pnCard1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCard1Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addGroup(pnCard1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(pnCard1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtTTMaThuocTinh)
                    .addComponent(txtTTTenThuocTinh, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        pnCard1Layout.setVerticalGroup(
            pnCard1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCard1Layout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addGroup(pnCard1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtTTMaThuocTinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addGroup(pnCard1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtTTTenThuocTinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pnCardGoc.add(pnCard1, "card1");

        pnCard2.setBackground(new java.awt.Color(255, 255, 255));
        pnCard2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Mã KT:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Chiều dài:");

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel25.setText("Chiều rộng:");

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel26.setText("Chiều cao:");

        txtMaKT.setEditable(false);

        javax.swing.GroupLayout pnCard2Layout = new javax.swing.GroupLayout(pnCard2);
        pnCard2.setLayout(pnCard2Layout);
        pnCard2Layout.setHorizontalGroup(
            pnCard2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCard2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnCard2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnCard2Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(txtMaKT, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE))
                    .addGroup(pnCard2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(29, 29, 29)
                        .addComponent(txtChieuDai))
                    .addGroup(pnCard2Layout.createSequentialGroup()
                        .addGroup(pnCard2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25)
                            .addComponent(jLabel26))
                        .addGap(18, 18, 18)
                        .addGroup(pnCard2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtChieuCao, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                            .addComponent(txtChieuRong))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        pnCard2Layout.setVerticalGroup(
            pnCard2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCard2Layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(pnCard2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtMaKT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnCard2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtChieuDai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnCard2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(txtChieuRong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnCard2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(txtChieuCao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pnCardGoc.add(pnCard2, "card2");

        pnCard3.setBackground(new java.awt.Color(255, 255, 255));
        pnCard3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel28.setText("Nhà sản xuất:");

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel29.setText("Nưỡc sản xuất:");

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel30.setText("Mã xuất xứ:");

        txtTTMaXuatXu.setEditable(false);

        javax.swing.GroupLayout pnCard3Layout = new javax.swing.GroupLayout(pnCard3);
        pnCard3.setLayout(pnCard3Layout);
        pnCard3Layout.setHorizontalGroup(
            pnCard3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCard3Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(pnCard3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel29)
                    .addComponent(jLabel28)
                    .addComponent(jLabel30))
                .addGap(18, 18, 18)
                .addGroup(pnCard3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtTTNhaSanXuat)
                    .addComponent(txtTTNuocSanXuat, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                    .addComponent(txtTTMaXuatXu))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        pnCard3Layout.setVerticalGroup(
            pnCard3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCard3Layout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addGroup(pnCard3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(txtTTMaXuatXu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnCard3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(txtTTNhaSanXuat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnCard3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(txtTTNuocSanXuat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        pnCardGoc.add(pnCard3, "card3");

        lblTTHinhAnh.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblTTHinhAnh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTTHinhAnh.setText("Hình ảnh");
        lblTTHinhAnh.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblTTHinhAnh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblTTHinhAnhMouseClicked(evt);
            }
        });

        jPanel21.setBackground(new java.awt.Color(255, 255, 255));
        jPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnTTThem.setBackground(new java.awt.Color(255, 204, 0));
        btnTTThem.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnTTThem.setForeground(new java.awt.Color(51, 51, 51));
        btnTTThem.setText("Thêm");
        btnTTThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTTThemActionPerformed(evt);
            }
        });

        btnTTSua.setBackground(new java.awt.Color(255, 204, 0));
        btnTTSua.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnTTSua.setForeground(new java.awt.Color(51, 51, 51));
        btnTTSua.setText("Sửa");
        btnTTSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTTSuaActionPerformed(evt);
            }
        });

        btnLamMoiTT.setBackground(new java.awt.Color(255, 204, 0));
        btnLamMoiTT.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnLamMoiTT.setText("Làm mới");
        btnLamMoiTT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiTTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnTTThem, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(btnTTSua, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(btnLamMoiTT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(btnTTThem)
                .addGap(37, 37, 37)
                .addComponent(btnTTSua)
                .addGap(35, 35, 35)
                .addComponent(btnLamMoiTT)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel22.setBackground(new java.awt.Color(255, 255, 255));
        jPanel22.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnGroupThuocTinhSP.add(rdTTHinhAnh);
        rdTTHinhAnh.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rdTTHinhAnh.setText("Hình ảnh");
        rdTTHinhAnh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdTTHinhAnhActionPerformed(evt);
            }
        });

        btnGroupThuocTinhSP.add(rdTTXuatXu);
        rdTTXuatXu.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rdTTXuatXu.setText("Xuất xứ");
        rdTTXuatXu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdTTXuatXuActionPerformed(evt);
            }
        });

        btnGroupThuocTinhSP.add(rdTTMauSac);
        rdTTMauSac.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rdTTMauSac.setText("Màu sắc");
        rdTTMauSac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdTTMauSacActionPerformed(evt);
            }
        });

        btnGroupThuocTinhSP.add(rdTTChatLieu);
        rdTTChatLieu.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rdTTChatLieu.setSelected(true);
        rdTTChatLieu.setText("Chất liệu");
        rdTTChatLieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdTTChatLieuActionPerformed(evt);
            }
        });

        cbbTTDonViTinh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnGroupThuocTinhSP.add(rdTTKichThuoc);
        rdTTKichThuoc.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rdTTKichThuoc.setText("Kích thước");
        rdTTKichThuoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdTTKichThuocActionPerformed(evt);
            }
        });

        btnGroupThuocTinhSP.add(rdTTKhoiLuong);
        rdTTKhoiLuong.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rdTTKhoiLuong.setText("Khối lượng");
        rdTTKhoiLuong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdTTKhoiLuongActionPerformed(evt);
            }
        });

        btnGroupThuocTinhSP.add(rdTTTheTich);
        rdTTTheTich.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rdTTTheTich.setText("Thể tích");
        rdTTTheTich.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdTTTheTichActionPerformed(evt);
            }
        });

        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel37.setText("Đơn vị đo:");

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(rdTTHinhAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel22Layout.createSequentialGroup()
                                .addComponent(jLabel37)
                                .addGap(18, 18, 18)
                                .addComponent(cbbTTDonViTinh, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(53, 53, 53))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel22Layout.createSequentialGroup()
                                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel22Layout.createSequentialGroup()
                                        .addComponent(rdTTTheTich, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(30, 30, 30))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                                        .addComponent(rdTTKichThuoc, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))
                                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rdTTMauSac, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(rdTTChatLieu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdTTKhoiLuong, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rdTTXuatXu, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jPanel22Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {rdTTHinhAnh, rdTTKhoiLuong, rdTTTheTich});

        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbTTDonViTinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdTTKhoiLuong)
                    .addComponent(jLabel37))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdTTHinhAnh)
                    .addComponent(rdTTChatLieu)
                    .addComponent(rdTTKichThuoc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdTTTheTich)
                    .addComponent(rdTTXuatXu)
                    .addComponent(rdTTMauSac))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel22Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {rdTTChatLieu, rdTTKhoiLuong, rdTTKichThuoc, rdTTMauSac, rdTTTheTich});

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(pnCardGoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(45, 45, 45)
                .addComponent(lblTTHinhAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnCardGoc, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel22, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblTTHinhAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnCardGocTable.setLayout(new java.awt.CardLayout());

        pnCardTB1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel18.setBackground(new java.awt.Color(255, 255, 255));
        jPanel18.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblTTThuocTinh.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã thuộc tính", "Thuộc tính"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTTThuocTinh.setRowHeight(20);
        tblTTThuocTinh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTTThuocTinhMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblTTThuocTinh);

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1105, Short.MAX_VALUE)
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnCardTB1Layout = new javax.swing.GroupLayout(pnCardTB1);
        pnCardTB1.setLayout(pnCardTB1Layout);
        pnCardTB1Layout.setHorizontalGroup(
            pnCardTB1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCardTB1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnCardTB1Layout.setVerticalGroup(
            pnCardTB1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCardTB1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnCardGocTable.add(pnCardTB1, "cardTB1");

        pnCardTB2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel19.setBackground(new java.awt.Color(255, 255, 255));
        jPanel19.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblTTKichThuoc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã kích thước", "Chiều dài", "Chiều rộng", "Chiều cao"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTTKichThuoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTTKichThuocMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tblTTKichThuoc);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1105, Short.MAX_VALUE)
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnCardTB2Layout = new javax.swing.GroupLayout(pnCardTB2);
        pnCardTB2.setLayout(pnCardTB2Layout);
        pnCardTB2Layout.setHorizontalGroup(
            pnCardTB2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCardTB2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnCardTB2Layout.setVerticalGroup(
            pnCardTB2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCardTB2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnCardGocTable.add(pnCardTB2, "cardTB2");

        pnCardTB3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel20.setBackground(new java.awt.Color(255, 255, 255));
        jPanel20.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tbTTXuatXu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã xuất xứ", "Nhà sản xuất", "Nước sản xuất"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbTTXuatXu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbTTXuatXuMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(tbTTXuatXu);

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1105, Short.MAX_VALUE)
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnCardTB3Layout = new javax.swing.GroupLayout(pnCardTB3);
        pnCardTB3.setLayout(pnCardTB3Layout);
        pnCardTB3Layout.setHorizontalGroup(
            pnCardTB3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCardTB3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnCardTB3Layout.setVerticalGroup(
            pnCardTB3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCardTB3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnCardGocTable.add(pnCardTB3, "cardTB3");

        javax.swing.GroupLayout pnThuocTinhLayout = new javax.swing.GroupLayout(pnThuocTinh);
        pnThuocTinh.setLayout(pnThuocTinhLayout);
        pnThuocTinhLayout.setHorizontalGroup(
            pnThuocTinhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnCardGocTable, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(pnThuocTinhLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnThuocTinhLayout.setVerticalGroup(
            pnThuocTinhLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnThuocTinhLayout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnCardGocTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnTongQuat.addTab("Thuộc tính sản phẩm", pnThuocTinh);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnTongQuat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnTongQuat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1134, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 738, Short.MAX_VALUE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblSanPhamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSanPhamMouseClicked
        viTri = tblSanPham.getSelectedRow();
        clickTable();
        // TODO add your handling code here:
    }//GEN-LAST:event_tblSanPhamMouseClicked

    private void btnChiTietSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChiTietSPActionPerformed
        int index = tblSanPham.getSelectedRow();
        if (index < 0) {
            Msgbox.alert(this, "Vui lòng chọn sản phẩm");
        } else {
            FillCbbMaSP();
            setSelectedComboboxTenSP(tblSanPham.getValueAt(viTri, 0).toString() + " - " + tblSanPham.getValueAt(viTri, 1).toString(), cbbMaSP);
            clickOpenSPCT();
            //            row = 0;
            //            edit();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnChiTietSPActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        if (Msgbox.confirm(this, "Bạn muốn thêm sản phẩm?")) {
            if (isValidate()) {
                return;
            } else if (isCheckTrung()) {
                return;
            } else {
                insertData();
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        int rowUpdate = tblSanPham.getSelectedRow();
        if (rowUpdate < 0) {
            Msgbox.alert(this, "Vui lòng chọn sản phẩm để sửa");
            return;
        } else {
            if (Msgbox.confirm(this, "Bạn muốn sửa sản phẩm?")) {
                if (isValidate()) {
                    return;
                } else {
                    updatetData();
                }
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        refeshTextFiled();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void tblSanPhamChiTietMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSanPhamChiTietMouseClicked
        //        row = tblSanPhamChiTiet.getSelectedRow();
        //        edit();
        clickTabelSPCT();
        // TODO add your handling code here:
    }//GEN-LAST:event_tblSanPhamChiTietMouseClicked

    private void txtTimKiemSPCTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemSPCTKeyReleased
        txtTimKiemGiaBan.setText("");
        timKiemSPCT();
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimKiemSPCTKeyReleased

    private void btnThemSPCTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemSPCTActionPerformed
        if (Msgbox.confirm(this, "Bạn muốn thêm sản phẩm chi tiết?")) {
            if (isValidateSPCT()) {
                return;
            } else if (isCheckTrungSPCT()) {
                return;
            } else {
                insertDataSPCT();
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnThemSPCTActionPerformed

    private void btnSuaSPCTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaSPCTActionPerformed
        int rowUpdate = tblSanPhamChiTiet.getSelectedRow();
        if (rowUpdate < 0) {
            Msgbox.alert(this, "Vui lòng chọn sản phẩm chi tiết để sửa");
            return;
        } else {
            if (Msgbox.confirm(this, "Bạn muốn sửa sản phẩm chi tiết?")) {
                if (isValidateSPCT()) {
                    return;
                } else {
                    updatetDataSPCT();
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSuaSPCTActionPerformed

    private void btnLamMoiSPCTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiSPCTActionPerformed
        fillTableSPCT();
        clearFromSPCT();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLamMoiSPCTActionPerformed

    private void txtTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemKeyReleased
        timKiemSP();
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimKiemKeyReleased

    private void txtGiaNhapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGiaNhapActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGiaNhapActionPerformed

    private void lblTTHinhAnhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblTTHinhAnhMouseClicked
        chonAnh();
        txtTTTenThuocTinh.setText(lblTTHinhAnh.getToolTipText());
        // TODO add your handling code here:
    }//GEN-LAST:event_lblTTHinhAnhMouseClicked

    private void rdTTChatLieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdTTChatLieuActionPerformed
        fillTableChatlieu();
        card.show(pnCardGoc, "card1"); // mở panel 1
        cardTB.show(pnCardGocTable, "cardTB1"); // mở panel 1
        LamMoiFromTT();
        // TODO add your handling code here:
    }//GEN-LAST:event_rdTTChatLieuActionPerformed

    private void rdTTTheTichActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdTTTheTichActionPerformed
        fillTableTheTich();
        card.show(pnCardGoc, "card1"); // mở panel 1
        cardTB.show(pnCardGocTable, "cardTB1"); // mở panel 1
        LamMoiFromTT();
        // TODO add your handling code here:
    }//GEN-LAST:event_rdTTTheTichActionPerformed

    private void rdTTKhoiLuongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdTTKhoiLuongActionPerformed
        cbbTTDonViTinh.setSelectedIndex(1);
        fillTableKhoiLuong();
        card.show(pnCardGoc, "card1"); // mở panel 1
        cardTB.show(pnCardGocTable, "cardTB1"); // mở panel 1
        LamMoiFromTT();
        // TODO add your handling code here:
    }//GEN-LAST:event_rdTTKhoiLuongActionPerformed

    private void rdTTMauSacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdTTMauSacActionPerformed
        fillTableMauSac();
        card.show(pnCardGoc, "card1"); // mở panel 1
        cardTB.show(pnCardGocTable, "cardTB1"); // mở panel 1
        LamMoiFromTT();
        // TODO add your handling code here:
    }//GEN-LAST:event_rdTTMauSacActionPerformed

    private void rdTTKichThuocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdTTKichThuocActionPerformed
        fillTableKichThuoc();
        cbbTTDonViTinh.setSelectedIndex(0);
        card.show(pnCardGoc, "card2"); // mở panel 1
        cardTB.show(pnCardGocTable, "cardTB2");
        LamMoiFromTTKT();
        // TODO add your handling code here:
    }//GEN-LAST:event_rdTTKichThuocActionPerformed

    private void tblTTThuocTinhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTTThuocTinhMouseClicked
        clickTbaleThuocTinh();
        // TODO add your handling code here:
    }//GEN-LAST:event_tblTTThuocTinhMouseClicked

    private void btnTTThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTTThemActionPerformed
        if (rdTTChatLieu.isSelected()) {
            if (!Msgbox.confirm(this, "Bạn có muốn thêm chất liệu không?")) {
                return;
            } else {
                if (isValidateThuocTinh()) {
                    return;
                } else if (isCheckThuocTinhCL()) {
                    return;
                } else {
                    InsertChatLieu();
                    addDataCbbCL();
                }
            }
        }
        if (rdTTKhoiLuong.isSelected()) {
            if (!Msgbox.confirm(this, "Bạn có muốn thêm khối lượng không?")) {
                return;
            } else {
                if (isValidateThuocTinh()) {
                    return;
                } else if (isCheckThuocTinhKL()) {
                    return;
                } else {
                    InsertKhoiLuong();
                    addDataCbbKL();
                }
            }
        }
        if (rdTTMauSac.isSelected()) {
            if (!Msgbox.confirm(this, "Bạn có muốn thêm màu sắc không?")) {
                return;
            } else {
                if (isValidateThuocTinh()) {
                    return;
                } else if (isCheckThuocTinhMS()) {
                    return;
                } else {
                    InsertMauSac();
                    addDataCbbMS();
                }
            }
        }
        if (rdTTTheTich.isSelected()) {
            if (!Msgbox.confirm(this, "Bạn có muốn thêm thể tích không?")) {
                return;
            } else {
                if (isValidateThuocTinh()) {
                    return;
                } else if (isCheckThuocTinhTT()) {
                    return;
                } else {
                    InsertTheTich();
                    addDataCbbTT();
                }
            }
        }
        if (rdTTKichThuoc.isSelected()) {
            if (!Msgbox.confirm(this, "Bạn có muốn thêm kích thước không?")) {
                return;
            } else {
                if (isValidateThuocTinhKT()) {
                    return;
                } else if (isCheckThuocTinhKT()) {
                    return;
                } else {
                    InsertKichThuoc();
                    addDataCbbKT();
                }
            }
        }
        if (rdTTXuatXu.isSelected()) {
            if (!Msgbox.confirm(this, "Bạn có muốn thêm xuất xứ không?")) {
                return;
            } else {
                if (isValidateThuocTinhXX()) {
                    return;
                } else if (isCheckThuocTinhXX()) {
                    return;
                } else {
                    InsertXuatXu();
                    addDataCbbXX();
                    addDataFillCbbXX();
                }
            }
        }
        if (rdTTHinhAnh.isSelected()) {
            if (!Msgbox.confirm(this, "Bạn có muốn thêm hình ảnh không?")) {
                return;
            } else {
                if (lblTTHinhAnh.getIcon() == null) {
                    Msgbox.alert(this, "Bạn vui lòng chọn hình ảnh.");
                    return;
                }
                if (isCheckThuocTinhIMG()) {
                    return;
                } else {
                    InsertImage();
                    addDataCbbIMG();
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnTTThemActionPerformed

    private void btnTTSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTTSuaActionPerformed
        int rowSuaKT = tblTTKichThuoc.getSelectedRow();
        int rowSuaTT = tblTTThuocTinh.getSelectedRow();
        int rowSuaXX = tbTTXuatXu.getSelectedRow();
        if (rdTTChatLieu.isSelected()) {
            if (rowSuaTT < 0) {
                Msgbox.alert(this, "Vui lòng chọn đối tượng để sửa!");
            } else {
                if (!Msgbox.confirm(this, "Bạn có muốn sửa chất liệu không?")) {
                    return;
                } else {
                    if (isValidateThuocTinh()) {
                        return;
                    } else if (isCheckThuocTinhCL()) {
                        return;
                    } else {
                        UpdateChatLieu();
                        addDataCbbCL();
                        fillTableSPCT();
                        rowSuaTT = -1;
                    }
                }
            }
        }
        if (rdTTKhoiLuong.isSelected()) {
            if (rowSuaTT < 0) {
                Msgbox.alert(this, "Vui lòng chọn đối tượng để sửa!");
            } else {
                if (!Msgbox.confirm(this, "Bạn có muốn sửa khối lượng không?")) {
                    return;
                } else {
                    if (isValidateThuocTinh()) {
                        return;
                    } else if (isCheckThuocTinhKL()) {
                        return;
                    } else {
                        UpdateKhoiLuong();
                        addDataCbbKL();
                        fillTableSPCT();
                        rowSuaTT = -1;
                    }
                }
            }
        }
        if (rdTTMauSac.isSelected()) {
            if (rowSuaTT < 0) {
                Msgbox.alert(this, "Vui lòng chọn đối tượng để sửa!");
            } else {
                if (!Msgbox.confirm(this, "Bạn có muốn sửa màu sắc không?")) {
                    return;
                } else {
                    if (isValidateThuocTinh()) {
                        return;
                    } else if (isCheckThuocTinhMS()) {
                        return;
                    } else {
                        UpdateMauSac();
                        addDataCbbMS();
                        fillTableSPCT();
                        rowSuaTT = -1;
                    }
                }
            }
        }
        if (rdTTTheTich.isSelected()) {
            if (rowSuaTT < 0) {
                Msgbox.alert(this, "Vui lòng chọn đối tượng để sửa!");
            } else {
                if (!Msgbox.confirm(this, "Bạn có muốn sửa thể tích không?")) {
                    return;
                } else {
                    if (isValidateThuocTinh()) {
                        return;
                    } else if (isCheckThuocTinhTT()) {
                        return;
                    } else {
                        UpdateTheTich();
                        addDataCbbTT();
                        fillTableSPCT();
                        rowSuaTT = -1;
                    }
                }
            }
        }
        if (rdTTKichThuoc.isSelected()) {
            if (rowSuaKT < 0) {
                Msgbox.alert(this, "Vui lòng chọn đối tượng để sửa!");
            } else {
                if (!Msgbox.confirm(this, "Bạn có muốn sửa kích thước không?")) {
                    return;
                } else {
                    if (isValidateThuocTinhKT()) {
                        return;
                    } else if (isCheckThuocTinhKT()) {
                        return;
                    } else {
                        UpdateKichThuoc();
                        addDataCbbKT();
                        fillTableSPCT();
                        rowSuaKT = -1;
                    }
                }
            }
        }
        if (rdTTXuatXu.isSelected()) {
            if (rowSuaXX < 0) {
                Msgbox.alert(this, "Vui lòng chọn đối tượng để sửa!");
            } else {
                if (!Msgbox.confirm(this, "Bạn có muốn sửa xuất xứ không?")) {
                    return;
                } else {
                    if (isValidateThuocTinhXX()) {
                        return;
                    } else if (isCheckThuocTinhXX()) {
                        return;
                    } else {
                        UpdateXuatXu();
                        addDataCbbXX();
                        fillTableData();
                        addDataFillCbbXX();
                        rowSuaXX = -1;
                    }
                }
            }
        }
        if (rdTTHinhAnh.isSelected()) {
            if (rowSuaTT < 0) {
                Msgbox.alert(this, "Vui lòng chọn đối tượng để sửa!");
            } else {
                if (!Msgbox.confirm(this, "Bạn có muốn sửa hình ảnh không?")) {
                    return;
                } else {
                    if (isValidateThuocTinh()) {
                        return;
                    } else if (isCheckThuocTinhIMG()) {
                        return;
                    } else {
                        UpdateImage();
                        addDataCbbIMG();
                        fillTableSPCT();
                        rowSuaTT = -1;
                    }
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnTTSuaActionPerformed

    private void rdTTHinhAnhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdTTHinhAnhActionPerformed
        fillTableImage();
        card.show(pnCardGoc, "card1"); // mở panel 1
        cardTB.show(pnCardGocTable, "cardTB1"); // mở panel 1
        LamMoiFromTT();
        // TODO add your handling code here:
    }//GEN-LAST:event_rdTTHinhAnhActionPerformed

    private void txtTimKiemGiaBanKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemGiaBanKeyReleased
        txtTimKiemSPCT.setText("");
        String dieuKienTimKiem = (String) cbbDieuKienTimKiem.getSelectedItem();
        String loaiGia = (String) cbbLoaiGia.getSelectedItem();
        if (loaiGia.equals("Giá bán")) {
            if (dieuKienTimKiem.equals(">")) {
                timKiemTheoGiaBanLonHon();
            }
            if (dieuKienTimKiem.equals("<")) {
                timKiemTheoGiaBanNhoHon();
            }
            if (dieuKienTimKiem.equals(">=")) {
                timKiemTheoGiaBanLonHonHoacBang();
            }
            if (dieuKienTimKiem.equals("<=")) {
                timKiemTheoGiaBanNhoHonHoacBang();
            }
            if (dieuKienTimKiem.equals("=")) {
                timKiemTheoGiaBanBang();
            }
        }
        if (loaiGia.equals("Giá nhập")) {
            if (dieuKienTimKiem.equals(">")) {
                timKiemTheoGiaNhapLonHon();
            }
            if (dieuKienTimKiem.equals("<")) {
                timKiemTheoGiaNhapNhoHon();
            }
            if (dieuKienTimKiem.equals(">=")) {
                timKiemTheoGiaNhapLonHonHoacBang();
            }
            if (dieuKienTimKiem.equals("<=")) {
                timKiemTheoGiaNhapNhoHonHoacBang();
            }
            if (dieuKienTimKiem.equals("=")) {
                timKiemTheoGiaNhapBang();
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimKiemGiaBanKeyReleased

    private void cbbDieuKienTimKiemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbDieuKienTimKiemItemStateChanged
        String dieuKienTimKiem = (String) cbbDieuKienTimKiem.getSelectedItem();
        String loaiGia = (String) cbbLoaiGia.getSelectedItem();
        if (loaiGia.equals("Giá bán")) {
            if (dieuKienTimKiem.equals(">")) {
                timKiemTheoGiaBanLonHon();
            }
            if (dieuKienTimKiem.equals("<")) {
                timKiemTheoGiaBanNhoHon();
            }
            if (dieuKienTimKiem.equals(">=")) {
                timKiemTheoGiaBanLonHonHoacBang();
            }
            if (dieuKienTimKiem.equals("<=")) {
                timKiemTheoGiaBanNhoHonHoacBang();
            }
            if (dieuKienTimKiem.equals("=")) {
                timKiemTheoGiaBanBang();
            }
        }
        if (loaiGia.equals("Giá nhập")) {
            if (dieuKienTimKiem.equals(">")) {
                timKiemTheoGiaNhapLonHon();
            }
            if (dieuKienTimKiem.equals("<")) {
                timKiemTheoGiaNhapNhoHon();
            }
            if (dieuKienTimKiem.equals(">=")) {
                timKiemTheoGiaNhapLonHonHoacBang();
            }
            if (dieuKienTimKiem.equals("<=")) {
                timKiemTheoGiaNhapNhoHonHoacBang();
            }
            if (dieuKienTimKiem.equals("=")) {
                timKiemTheoGiaNhapBang();
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbDieuKienTimKiemItemStateChanged

    private void cbbLoaiGiaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbLoaiGiaItemStateChanged
        String dieuKienTimKiem = (String) cbbDieuKienTimKiem.getSelectedItem();
        String loaiGia = (String) cbbLoaiGia.getSelectedItem();
        if (loaiGia.equals("Giá bán")) {
            if (dieuKienTimKiem.equals(">")) {
                timKiemTheoGiaBanLonHon();
            }
            if (dieuKienTimKiem.equals("<")) {
                timKiemTheoGiaBanNhoHon();
            }
            if (dieuKienTimKiem.equals(">=")) {
                timKiemTheoGiaBanLonHonHoacBang();
            }
            if (dieuKienTimKiem.equals("<=")) {
                timKiemTheoGiaBanNhoHonHoacBang();
            }
            if (dieuKienTimKiem.equals("=")) {
                timKiemTheoGiaBanBang();
            }
        }
        if (loaiGia.equals("Giá nhập")) {
            if (dieuKienTimKiem.equals(">")) {
                timKiemTheoGiaNhapLonHon();
            }
            if (dieuKienTimKiem.equals("<")) {
                timKiemTheoGiaNhapNhoHon();
            }
            if (dieuKienTimKiem.equals(">=")) {
                timKiemTheoGiaNhapLonHonHoacBang();
            }
            if (dieuKienTimKiem.equals("<=")) {
                timKiemTheoGiaNhapNhoHonHoacBang();
            }
            if (dieuKienTimKiem.equals("=")) {
                timKiemTheoGiaNhapBang();
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbLoaiGiaItemStateChanged

    private void rdTTXuatXuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdTTXuatXuActionPerformed
        fillTableXuatXu();
        card.show(pnCardGoc, "card3"); // mở panel 1
        cardTB.show(pnCardGocTable, "cardTB3"); // mở panel 1
        LamMoiFromTTXX();
        // TODO add your handling code here:
    }//GEN-LAST:event_rdTTXuatXuActionPerformed

    private void tblTTKichThuocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTTKichThuocMouseClicked
        clickTbaleThuocTinhKichThuoc();
        // TODO add your handling code here:
    }//GEN-LAST:event_tblTTKichThuocMouseClicked

    private void tbTTXuatXuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbTTXuatXuMouseClicked
        clickTbaleThuocTinhXuatXu();
        // TODO add your handling code here:
    }//GEN-LAST:event_tbTTXuatXuMouseClicked

    private void cbbLocChiTietSanPhamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbLocChiTietSanPhamActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_cbbLocChiTietSanPhamActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (Msgbox.confirm(this, "Bạn muốn xuất file excel?")) {
            XuatFileExcel();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cbbIMGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbIMGActionPerformed
        if (cbbIMG.getItemCount() > 0) {
            Image img = (Image) cbbIMG.getSelectedItem();
            lblHinhAnh.setIcon(XImage.read(img.getTenHinh()));
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbIMGActionPerformed

    private void cbbTrangThaiSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbTrangThaiSPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbTrangThaiSPActionPerformed

    private void cbbMaSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbMaSPActionPerformed
//        fillTableSPCT_MaSP_Combobox();
//        cbbLocChiTietSanPham.setSelectedIndex(0);
//        txtTimKiemSPCT.setText("");
//        txtTimKiemGiaBan.setText("");
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbMaSPActionPerformed

    private void cbbFillDanhMucItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbFillDanhMucItemStateChanged
        String ganText = cbbFillDanhMuc.getSelectedItem().toString();
        if (ganText.equals(" ")) {
            fillTableData();
            return;
        }
        cbbFillTrangThaiSP.setSelectedIndex(0);
        cbbFillXuatXu.setSelectedItem(" ");
        fillComBoBoxDanhMuc();
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbFillDanhMucItemStateChanged

    private void cbbFillXuatXuItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbFillXuatXuItemStateChanged
        if (cbbFillXuatXu.getItemCount() > 0) {
            String ganText = cbbFillXuatXu.getSelectedItem().toString();
            if (ganText.equals(" ")) {
                fillTableData();
                return;
            }
            cbbFillTrangThaiSP.setSelectedIndex(0);
            cbbFillDanhMuc.setSelectedIndex(0);
            fillComBoBoxXuatXu();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_cbbFillXuatXuItemStateChanged

    private void cbbFillTrangThaiSPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbFillTrangThaiSPItemStateChanged
        String getText = cbbFillTrangThaiSP.getSelectedItem().toString();
        if (getText.equals(" ")) {
            cbbFillDanhMuc.setSelectedIndex(0);
            cbbFillXuatXu.setSelectedIndex(0);
            fillTableData();
        }
        if (getText.equals("Đang kinh doanh")) {
            trangThaiSP = true;
            cbbFillDanhMuc.setSelectedIndex(0);
            cbbFillXuatXu.setSelectedIndex(0);
            locSPTheoTrangThai();
        }
        if (getText.equals("Ngừng kinh doanh")) {
            trangThaiSP = false;
            cbbFillDanhMuc.setSelectedIndex(0);
            cbbFillXuatXu.setSelectedIndex(0);
            locSPTheoTrangThai();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbFillTrangThaiSPItemStateChanged

    private void cbbFillMaSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbFillMaSPActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_cbbFillMaSPActionPerformed

    private void cbbFillMaSPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbFillMaSPItemStateChanged
        if (cbbFillMaSP.getItemCount() > 0) {
            String ganText = cbbFillMaSP.getSelectedItem().toString();
            if (ganText.equals(" ")) {
                fillTableSPCT();
            } else {
                fillTableSPCT_MaSP_Combobox();
                cbbLocChiTietSanPham.setSelectedIndex(0);
                txtTimKiemSPCT.setText("");
                txtTimKiemGiaBan.setText("");
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbFillMaSPItemStateChanged

    private void cbbLocChiTietSanPhamItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbLocChiTietSanPhamItemStateChanged
        String locSP = (String) cbbLocChiTietSanPham.getSelectedItem();
        if (locSP.equals(" ")) {
            LamMoiLoc();
            fillTableSPCT();
        }
        if (locSP.equals("Không phổ biến")) {
            LamMoiLoc();
            nhomPhoBien = false;
            fillTableSPCT_NhomSPCT();
        }
        if (locSP.equals("Phổ biến")) {
            LamMoiLoc();
            nhomPhoBien = true;
            fillTableSPCT_NhomSPCT();
        }
        if (locSP.equals("Dưới định mức")) {
            LamMoiLoc();
            dieuKien = 5;
            fillTableSPCT_SoLuongSPCT_DuoiDinhMucTon();
        }
        if (locSP.equals("Vượt định mức")) {
            LamMoiLoc();
            dieuKien = 20;
            fillTableSPCT_SoLuongSPCT_VuotDinhMucTon();
        }
        if (locSP.equals("Còn hàng")) {
            LamMoiLoc();
            dieuKien = 0;
            fillTableSPCT_SoLuongSPCT_VuotDinhMucTon();
        }
        if (locSP.equals("Hết hàng")) {
            LamMoiLoc();
            dieuKien = 1;
            fillTableSPCT_SoLuongSPCT_DuoiDinhMucTon();
        }
        if (locSP.equals("Đang kinh doanh")) {
            LamMoiLoc();
            fillTableSPCT_DangKinhDoanh();
        }
        if (locSP.equals("Ngừng kinh doanh")) {
            LamMoiLoc();
            fillTableSPCT_NgungKinhDoanh();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbLocChiTietSanPhamItemStateChanged

    private void btnLamMoiTTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiTTActionPerformed
        if (rdTTChatLieu.isSelected()) {
            lamMoiThuocTinh();
            fillTableChatlieu();
        }
        if (rdTTKhoiLuong.isSelected()) {
            lamMoiThuocTinh();
            fillTableKhoiLuong();
        }
        if (rdTTMauSac.isSelected()) {
            lamMoiThuocTinh();
            fillTableMauSac();
        }
        if (rdTTTheTich.isSelected()) {
            lamMoiThuocTinh();
            fillTableTheTich();
        }
        if (rdTTKichThuoc.isSelected()) {
            lamMoiKichThuoc();
            fillTableKichThuoc();
        }
        if (rdTTXuatXu.isSelected()) {
            lamMoiXuuatXu();
            fillTableXuatXu();
        }
        if (rdTTHinhAnh.isSelected()) {
            lamMoiThuocTinh();
            fillTableImage();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLamMoiTTActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AreaMoTa;
    private javax.swing.JButton btnChiTietSP;
    private javax.swing.ButtonGroup btnGroupNhom;
    private javax.swing.ButtonGroup btnGroupSLHangTon;
    private javax.swing.ButtonGroup btnGroupSxNhom;
    private javax.swing.ButtonGroup btnGroupThuocTinhSP;
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnLamMoiSPCT;
    private javax.swing.JButton btnLamMoiTT;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnSuaSPCT;
    private javax.swing.JButton btnTTSua;
    private javax.swing.JButton btnTTThem;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnThemSPCT;
    private javax.swing.JComboBox<String> cbbChatLieu;
    private javax.swing.JComboBox<String> cbbDanhMuc;
    private javax.swing.JComboBox<String> cbbDieuKienTimKiem;
    private javax.swing.JComboBox<String> cbbFillDanhMuc;
    private javax.swing.JComboBox<String> cbbFillMaSP;
    private javax.swing.JComboBox<String> cbbFillTrangThaiSP;
    private javax.swing.JComboBox<String> cbbFillXuatXu;
    private javax.swing.JComboBox<String> cbbIMG;
    private javax.swing.JComboBox<String> cbbKhoiLuong;
    private javax.swing.JComboBox<String> cbbKichThuoc;
    private javax.swing.JComboBox<String> cbbLoaiGia;
    private javax.swing.JComboBox<String> cbbLocChiTietSanPham;
    private javax.swing.JComboBox<String> cbbMaSP;
    private javax.swing.JComboBox<String> cbbMauSac;
    private javax.swing.JComboBox<String> cbbNhomPhoBien;
    private javax.swing.JComboBox<String> cbbTTDonViTinh;
    private javax.swing.JComboBox<String> cbbTheTich;
    private javax.swing.JComboBox<String> cbbTrangThaiSP;
    private javax.swing.JComboBox<String> cbbTrangThaiSPCT;
    private javax.swing.JComboBox<String> cbbXuatXu;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblHinhAnh;
    private javax.swing.JLabel lblTTHinhAnh;
    private javax.swing.JPanel pnCard1;
    private javax.swing.JPanel pnCard2;
    private javax.swing.JPanel pnCard3;
    private javax.swing.JPanel pnCardGoc;
    private javax.swing.JPanel pnCardGocTable;
    private javax.swing.JPanel pnCardTB1;
    private javax.swing.JPanel pnCardTB2;
    private javax.swing.JPanel pnCardTB3;
    private javax.swing.JPanel pnSPCT;
    private javax.swing.JPanel pnSanPham;
    private javax.swing.JPanel pnThuocTinh;
    private javax.swing.JTabbedPane pnTongQuat;
    private javax.swing.JRadioButton rdTTChatLieu;
    private javax.swing.JRadioButton rdTTHinhAnh;
    private javax.swing.JRadioButton rdTTKhoiLuong;
    private javax.swing.JRadioButton rdTTKichThuoc;
    private javax.swing.JRadioButton rdTTMauSac;
    private javax.swing.JRadioButton rdTTTheTich;
    private javax.swing.JRadioButton rdTTXuatXu;
    private javax.swing.JTable tbTTXuatXu;
    private javax.swing.JTable tblSanPham;
    private javax.swing.JTable tblSanPhamChiTiet;
    private javax.swing.JTable tblTTKichThuoc;
    private javax.swing.JTable tblTTThuocTinh;
    private javax.swing.JTextField txtChieuCao;
    private javax.swing.JTextField txtChieuDai;
    private javax.swing.JTextField txtChieuRong;
    private javax.swing.JTextField txtGiaBan;
    private javax.swing.JTextField txtGiaNhap;
    private javax.swing.JTextField txtMaKT;
    private javax.swing.JTextField txtMaSP;
    private javax.swing.JTextField txtMaSPCT;
    private javax.swing.JTextField txtSoLuong;
    private javax.swing.JTextField txtTTMaThuocTinh;
    private javax.swing.JTextField txtTTMaXuatXu;
    private javax.swing.JTextField txtTTNhaSanXuat;
    private javax.swing.JTextField txtTTNuocSanXuat;
    private javax.swing.JTextField txtTTTenThuocTinh;
    private javax.swing.JTextField txtTenSP;
    private javax.swing.JTextField txtTenSPCT;
    private javax.swing.JTextField txtTimKiem;
    private javax.swing.JTextField txtTimKiemGiaBan;
    private javax.swing.JTextField txtTimKiemSPCT;
    // End of variables declaration//GEN-END:variables

    boolean isValidate() {
        try {
//            if (txtMaSP.getText().trim().equals("")) {
//                Msgbox.alert(this, "Mã sản phẩm không được để trống");
//                return true;
//            } else
            if (txtTenSP.getText().trim().equals("")) {
                Msgbox.alert(this, "Tên sản phẩm không được để trống");
                return true;
            } else if (txtMaSP.getText().length() > 10) {
                Msgbox.alert(this, "Mã sản phẩm tối đa 10 kí tự");
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return true;
        }
    }
    
    boolean isCheckTrung() {
        boolean check = false;
        List<SanPham> list = daoSP.selectAll();
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getTenSp().equalsIgnoreCase(txtTenSP.getText())) {
                Msgbox.alert(this, "Tên sản phẩm đã tồn tại");
                check = true;
                break;
            }
        }
        return check;
    }
    
    void addDataCbbXX() {
        try {
            DefaultComboBoxModel model = (DefaultComboBoxModel) cbbXuatXu.getModel();
            model.removeAllElements();
            List<XuatXu> list = daoXX.selectAll();
            for (XuatXu cd : list) {
                model.addElement(cd);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void addDataCbbDM() {
        try {
            DefaultComboBoxModel model = (DefaultComboBoxModel) cbbDanhMuc.getModel();
            model.removeAllElements();
            List<DanhMuc> list = daoDM.selectAll();
            for (DanhMuc cd : list) {
                model.addElement(cd);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void addDataFillCbbDM() {
        try {
            DefaultComboBoxModel model = (DefaultComboBoxModel) cbbFillDanhMuc.getModel();
            model.removeAllElements();
            cbbFillDanhMuc.addItem(" ");
            List<DanhMuc> list = daoDM.selectAll();
            for (DanhMuc dm : list) {
                model.addElement(dm);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void addDataFillCbbXX() {
        try {
            DefaultComboBoxModel model = (DefaultComboBoxModel) cbbFillXuatXu.getModel();
            model.removeAllElements();
            cbbFillXuatXu.addItem(" ");
            List<XuatXu> list = daoXX.selectAll();
            for (XuatXu xx : list) {
                model.addElement(xx);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void fillComBoBoxDanhMuc() {
        model1 = (DefaultTableModel) tblSanPham.getModel();
        model1.setRowCount(0);
        try {
            DanhMuc dm = (DanhMuc) cbbFillDanhMuc.getSelectedItem();
            List<SanPham> listSPCT = daoSP.selectByDM(dm.getTenDanhMuc());
            for (SanPham x : listSPCT) {
                model1.addRow(new Object[]{
                    x.getMaSp(), x.getTenSp(), x.getTenDanhMuc(), x.getNhaSX(), x.getNuocSX(), x.isTrangThaiSP() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void fillComBoBoxXuatXu() {
        model1 = (DefaultTableModel) tblSanPham.getModel();
        model1.setRowCount(0);
        try {
            XuatXu xx = (XuatXu) cbbFillXuatXu.getSelectedItem();
            List<SanPham> listSPCT = daoSP.selectByXX(xx.getNhaSX());
            for (SanPham x : listSPCT) {
                model1.addRow(new Object[]{
                    x.getMaSp(), x.getTenSp(), x.getTenDanhMuc(), x.getNhaSX(), x.getNuocSX(), x.isTrangThaiSP() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //-------------------------- Test ---------------------------------------------------
    void fillTableData() {
        model1 = (DefaultTableModel) tblSanPham.getModel();
        model1.setRowCount(0);
        try {
            List<SanPham> listSP = daoSP.selectAll();
            for (SanPham x : listSP) {
                model1.addRow(new Object[]{
                    x.getMaSp(), x.getTenSp(), x.getTenDanhMuc(), x.getNhaSX(), x.getNuocSX(), x.isTrangThaiSP() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void setSelectedComboboxTenSP(String cbbselected, JComboBox cbb) {
        try {
            for (int i = 0; i < cbb.getItemCount(); i++) {
                SanPham m = (SanPham) cbb.getItemAt(i);
                if (m != null) {
                    if (cbbselected.trim().equals(m.getMaSp() + " - " + m.getTenSp())) {
                        cbb.setSelectedItem(m);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void setSelectedComboboxDM(String cbbselected, JComboBox cbb) {
        try {
            for (int i = 0; i < cbb.getItemCount(); i++) {
                DanhMuc m = (DanhMuc) cbb.getItemAt(i);
                if (m != null) {
                    if (cbbselected.trim().equals(m.getTenDanhMuc())) {
                        cbb.setSelectedItem(m);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void setSelectedComboboxXX(String cbbselected, JComboBox cbb) {
        try {
            for (int i = 0; i < cbb.getItemCount(); i++) {
                XuatXu m = (XuatXu) cbb.getItemAt(i);
                if (m != null) {
                    if (cbbselected.trim().equals(m.getNhaSX() + " - " + m.getNuocSX())) {
                        cbb.setSelectedItem(m);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void clickTable() {
        try {
            txtMaSP.setText(model1.getValueAt(viTri, 0).toString());
            txtTenSP.setText(model1.getValueAt(viTri, 1).toString());
            setSelectedComboboxXX(model1.getValueAt(viTri, 3).toString() + " - " + model1.getValueAt(viTri, 4).toString(), cbbXuatXu);
            setSelectedComboboxDM(model1.getValueAt(viTri, 2).toString(), cbbDanhMuc);
            setSelectedComboboxTenSP(model1.getValueAt(viTri, 1).toString(), cbbMaSP);
            cbbTrangThaiSP.setSelectedItem(model1.getValueAt(viTri, 5));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void insertData() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền thêm sản phẩm");
        } else {
            SanPham sp = getFromSP();
            try {
                daoSP.insertData(sp);
                fillTableData();
                Msgbox.alert(this, "Thêm thành công!");
                refeshTextFiled();
                FillCbbMaSP();
                FillCbbMaSPFIll();
            } catch (Exception e) {
                Msgbox.alert(this, "Thêm thất bại");
                e.printStackTrace();
            }
        }
    }
    
    void updatetData() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền sửa sản phẩm");
        } else {
            SanPham sp = getFromSPUpdate();
            SanPhamChiTiet spct = getfromUpdateTrangThai();
            try {
                daoSPCT.updateDataTrangThai(spct);
                fillTableSPCT();
                daoSP.updateData(sp);
                fillTableData();
                refeshTextFiled();
                FillCbbMaSP();
                FillCbbMaSPFIll();
                Msgbox.alert(this, "Cập nhật thành công!");
            } catch (Exception e) {
                e.printStackTrace();
                Msgbox.alert(this, "Cập nhật thất bại!");
            }
        }
    }
    
    void refeshTextFiled() {
        txtMaSP.setText("");
        txtTenSP.setText("");
        txtTimKiem.setText("");
        cbbDanhMuc.setSelectedIndex(0);
        cbbXuatXu.setSelectedIndex(0);
        cbbTrangThaiSP.setSelectedIndex(0);
        cbbFillTrangThaiSP.setSelectedIndex(0);
        cbbFillXuatXu.setSelectedIndex(0);
        cbbFillDanhMuc.setSelectedIndex(0);
        fillTableData();
    }
    
    SanPham getFromSP() {
        XuatXu cd = (XuatXu) cbbXuatXu.getSelectedItem();
        DanhMuc dm = (DanhMuc) cbbDanhMuc.getSelectedItem();
        List<SanPham> slsp = daoSP.selectAll();
        int soLuongSP = slsp.size();
        SanPham sp = new SanPham();
        sp.setMaSp("SP00" + (soLuongSP + 1));
        sp.setMaDanhMuc(dm.getMaDanhMuc());
        sp.setTenSp(txtTenSP.getText());
        sp.setMaXX(cd.getMaXX());
        String TrangThaiSP = cbbTrangThaiSP.getSelectedItem().toString();
        if (TrangThaiSP.equals("Đang kinh doanh")) {
            sp.setTrangThaiSP(true);
        } else {
            sp.setTrangThaiSP(false);
        }
        return sp;
    }
    
    SanPham getFromSPUpdate() {
        XuatXu cd = (XuatXu) cbbXuatXu.getSelectedItem();
        DanhMuc dm = (DanhMuc) cbbDanhMuc.getSelectedItem();
        SanPham sp = new SanPham();
        sp.setMaSp(txtMaSP.getText());
        sp.setMaDanhMuc(dm.getMaDanhMuc());
        sp.setTenSp(txtTenSP.getText());
        sp.setMaXX(cd.getMaXX());
        String TrangThaiSP = cbbTrangThaiSP.getSelectedItem().toString();
        if (TrangThaiSP.equals("Đang kinh doanh")) {
            sp.setTrangThaiSP(true);
        } else {
            sp.setTrangThaiSP(false);
        }
        return sp;
    }
    
    void locSPTheoTrangThai() {
        model1.setRowCount(0);
        List<SanPham> list = daoSP.selectAll();
        for (SanPham x : list) {
            if (x.isTrangThaiSP() == trangThaiSP) {
                model1.addRow(new Object[]{
                    x.getMaSp(), x.getTenSp(), x.getTenDanhMuc(), x.getNhaSX(), x.getNuocSX(), x.isTrangThaiSP() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                });
            }
        }
    }
    
    public void timKiemSP() {
        if (cbbFillTrangThaiSP.getSelectedIndex() > 0
                || cbbFillXuatXu.getSelectedIndex() > 0
                || cbbFillDanhMuc.getSelectedIndex() > 0) {
            cbbFillTrangThaiSP.setSelectedIndex(0);
            cbbFillXuatXu.setSelectedIndex(0);
            cbbFillDanhMuc.setSelectedIndex(0);
        }
        try {
            model1.setRowCount(0);
            List<SanPham> list = daoSP.selectByTimKiem(txtTimKiem.getText());
            for (SanPham x : list) {
                model1.addRow(new Object[]{
                    x.getMaSp(), x.getTenSp(), x.getTenDanhMuc(), x.getNhaSX(), x.getNuocSX(), x.isTrangThaiSP() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }

    // ------------------------------- SPCT ---------------------------------------
    boolean isValidateSPCT() {
        try {
//            if (txtMaSPCT.getText().trim().equals("")) {
//                Msgbox.alert(this, "Mã sản phẩm chi tiết không được để trống");
//                return true;
//            } else
            long giaNhap = XMoney.loaiBoDauCham(txtGiaNhap.getText());
            long giaBan = XMoney.loaiBoDauCham(txtGiaNhap.getText());
            if (txtTenSPCT.getText().trim().equals("")) {
                Msgbox.alert(this, "Tên sản phẩm chi tiết không được để trống");
                return true;
            } else if (txtSoLuong.getText().trim().equals("")) {
                Msgbox.alert(this, "Số lượng không được để trống");
                return true;
            } else if (txtGiaNhap.getText().trim().equals("")) {
                Msgbox.alert(this, "Giá nhập không được để trống");
                return true;
            } else if (txtGiaBan.getText().trim().equals("")) {
                Msgbox.alert(this, "Giá bán không được để trống");
                return true;
            } else if (txtMaSPCT.getText().length() > 10) {
                Msgbox.alert(this, "Mã sản phẩm chi tiết tối đa 10 kí tự");
                return true;
            } else if (Integer.parseInt(txtSoLuong.getText()) <= 0) {
                Msgbox.alert(this, "Số lượng sản phẩm phải lớn hơn 0");
                return true;
            } else if (giaNhap <= 0) {
                Msgbox.alert(this, "Giá nhập phải lớn hơn 0");
                return true;
            } else if (giaBan < 0) {
                Msgbox.alert(this, "Giá bán phải lớn hơn 0");
                return true;
            } else if (AreaMoTa.getText().trim().equals("")) {
                Msgbox.alert(this, "Mô tả không được để trống");
                return true;
            } else {
                return false;
            }
        } catch (NumberFormatException e) {
            Msgbox.alert(this, "Số lượng và giá tiền phải là số");
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return true;
        }
    }
    
    boolean isCheckTrungSPCT() {
        boolean check = false;
        List<SanPhamChiTiet> list = daoSPCT.selectAll();
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getTenSPCT().equalsIgnoreCase(txtTenSPCT.getText())) {
                Msgbox.alert(this, "Tên sản phẩm chi tiết đã tồn tại");
                check = true;
                break;
            }
        }
        return check;
    }
    
    void addDataCbbTT() {
        try {
            DefaultComboBoxModel model = (DefaultComboBoxModel) cbbTheTich.getModel();
            model.removeAllElements();
            List<TheTich> list = daoTT.selectAll();
            for (TheTich cd : list) {
                model.addElement(cd);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void insertDataSPCT() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền thêm sản phẩm chi tiết");
        } else {
            SanPhamChiTiet spct = getFromSPSPCT();
            try {
                daoSPCT.insertData(spct);
                fillTableSPCT();
                Msgbox.alert(this, "Thêm thành công!");
                ganText = "";
                clearFromSPCT();
            } catch (Exception e) {
                Msgbox.alert(this, "Thêm thất bại");
                e.printStackTrace();
            }
        }
    }
    
    void updatetDataSPCT() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền sửa sản phẩm chi tiết");
        } else {
            SanPhamChiTiet spct = getFromSPSPCTUpdate();
            try {
                daoSPCT.updateData(spct);
                fillTableSPCT();
                clearFromSPCT();
                Msgbox.alert(this, "Cập nhật thành công!");
            } catch (Exception e) {
                e.printStackTrace();
                Msgbox.alert(this, "Cập nhật thất bại!");
            }
        }
    }
    
    void fillTableSPCT() {
        modelSPCT = (DefaultTableModel) tblSanPhamChiTiet.getModel();
        modelSPCT.setRowCount(0);
        try {
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            for (SanPhamChiTiet x : listSPCT) {
                modelSPCT.addRow(new Object[]{
                    x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                    x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                    x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void FillCbbMaSP() {
        try {
            DefaultComboBoxModel model = (DefaultComboBoxModel) cbbMaSP.getModel();
            model.removeAllElements();
            List<SanPham> list = daoSP.selectAll();
            for (SanPham cd : list) {
                model.addElement(cd);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void FillCbbMaSPFIll() {
        try {
            DefaultComboBoxModel model = (DefaultComboBoxModel) cbbFillMaSP.getModel();
            model.removeAllElements();
            cbbFillMaSP.addItem(" ");
            List<SanPham> list = daoSP.selectAll();
            for (SanPham cd : list) {
                model.addElement(cd);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void fillTableSPCT_MaSP() {
        modelSPCT = (DefaultTableModel) tblSanPhamChiTiet.getModel();
        modelSPCT.setRowCount(0);
        try {
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectBySPCT(txtMaSP.getText());
            for (SanPhamChiTiet x : listSPCT) {
                modelSPCT.addRow(new Object[]{
                    x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                    x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                    x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // nhóm
    void fillTableSPCT_NhomSPCT() {
        modelSPCT = (DefaultTableModel) tblSanPhamChiTiet.getModel();
        modelSPCT.setRowCount(0);
        try {
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            for (SanPhamChiTiet x : listSPCT) {
                if (x.isNhomPhoBien() == nhomPhoBien) {
                    modelSPCT.addRow(new Object[]{
                        x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                        x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                        x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                    });
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // số lượng
    void fillTableSPCT_SoLuongSPCT_VuotDinhMucTon() {
        modelSPCT = (DefaultTableModel) tblSanPhamChiTiet.getModel();
        modelSPCT.setRowCount(0);
        try {
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            for (SanPhamChiTiet x : listSPCT) {
                if (x.getSoLuong() > dieuKien) {
                    modelSPCT.addRow(new Object[]{
                        x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                        x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                        x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                    });
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void fillTableSPCT_SoLuongSPCT_DuoiDinhMucTon() {
        modelSPCT = (DefaultTableModel) tblSanPhamChiTiet.getModel();
        modelSPCT.setRowCount(0);
        try {
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            for (SanPhamChiTiet x : listSPCT) {
                if (x.getSoLuong() < dieuKien) {
                    modelSPCT.addRow(new Object[]{
                        x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                        x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                        x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                    });
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void fillTableSPCT_DangKinhDoanh() {
        modelSPCT = (DefaultTableModel) tblSanPhamChiTiet.getModel();
        modelSPCT.setRowCount(0);
        try {
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            for (SanPhamChiTiet x : listSPCT) {
                if (x.isTrangThai() == true) {
                    modelSPCT.addRow(new Object[]{
                        x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                        x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                        x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                    });
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void fillTableSPCT_NgungKinhDoanh() {
        modelSPCT = (DefaultTableModel) tblSanPhamChiTiet.getModel();
        modelSPCT.setRowCount(0);
        try {
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            for (SanPhamChiTiet x : listSPCT) {
                if (x.isTrangThai() == false) {
                    modelSPCT.addRow(new Object[]{
                        x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                        x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                        x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                    });
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void fillTableSPCT_MaSP_Combobox() {
        modelSPCT = (DefaultTableModel) tblSanPhamChiTiet.getModel();
        modelSPCT.setRowCount(0);
        try {
            SanPham sp = (SanPham) cbbFillMaSP.getSelectedItem();
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectBySPCT(sp.getMaSp());
            for (SanPhamChiTiet x : listSPCT) {
                modelSPCT.addRow(new Object[]{
                    x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                    x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                    x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void clickOpenSPCT() {
        if (viTri >= 0) {
            pnTongQuat.setSelectedIndex(1);
//            fillTableSPCT();
            fillTableSPCT_MaSP();
        } else {
            Msgbox.alert(this, "Vui lòng chọn sản phẩm!");
        }
    }
    
    SanPhamChiTiet getFromSPSPCT() {
        TheTich tt = (TheTich) cbbTheTich.getSelectedItem();
        KichThuoc kt = (KichThuoc) cbbKichThuoc.getSelectedItem();
        KhoiLuong kl = (KhoiLuong) cbbKhoiLuong.getSelectedItem();
        ChatLieu cl = (ChatLieu) cbbChatLieu.getSelectedItem();
        MauSac ms = (MauSac) cbbMauSac.getSelectedItem();
        Image img = (Image) cbbIMG.getSelectedItem();
        String trangThaiSPCT = (String) cbbTrangThaiSPCT.getSelectedItem();
        String nhomPhoBien = (String) cbbNhomPhoBien.getSelectedItem();
        List<SanPhamChiTiet> slspct = daoSPCT.selectAll();
        int soLuongSPCT = slspct.size();
        // ----------------------------------------------------------------------
        SanPhamChiTiet spct = new SanPhamChiTiet();
        SanPham sp = (SanPham) cbbMaSP.getSelectedItem();
        spct.setMaSp(sp.getMaSp());
        
        String name = sp.getTenSp();
        String[] words = name.split("\\s");
        for (String x : words) {
            ganText += x.substring(0, 1);
        }
        spct.setMaSPCT(ganText + "00" + (soLuongSPCT + 1));
        spct.setTenSPCT(txtTenSPCT.getText());
        spct.setSoLuong(Integer.parseInt(txtSoLuong.getText()));
        spct.setGiaNhap(XMoney.loaiBoDauCham(txtGiaNhap.getText()));
        spct.setGiaBan(XMoney.loaiBoDauCham(txtGiaBan.getText()));
        if (nhomPhoBien.equals("Phổ biến")) {
            spct.setNhomPhoBien(true);
        } else {
            spct.setNhomPhoBien(false);
        }
        spct.setMaMauSac(ms.getMaMauSac());
        spct.setMaTheTich(tt.getMaTheTich());
        spct.setMaKL(kl.getMaKL());
        spct.setMaKichThuoc(kt.getMaKichThuoc());
        spct.setMaChatLieu(cl.getMaChatLieu());
        spct.setMaImage(img.getMaImage());
        if (trangThaiSPCT.equals("Đang kinh doanh")) {
            spct.setTrangThai(true);
        } else {
            spct.setTrangThai(false);
        }
        spct.setMoTa(AreaMoTa.getText());
        return spct;
    }
    
    SanPhamChiTiet getFromSPSPCTUpdate() {
        TheTich tt = (TheTich) cbbTheTich.getSelectedItem();
        KichThuoc kt = (KichThuoc) cbbKichThuoc.getSelectedItem();
        KhoiLuong kl = (KhoiLuong) cbbKhoiLuong.getSelectedItem();
        ChatLieu cl = (ChatLieu) cbbChatLieu.getSelectedItem();
        MauSac ms = (MauSac) cbbMauSac.getSelectedItem();
        Image img = (Image) cbbIMG.getSelectedItem();
        String trangThaiSPCT = (String) cbbTrangThaiSPCT.getSelectedItem();

        // ----------------------------------------------------------------------
        SanPhamChiTiet spct = new SanPhamChiTiet();
        SanPham sp = (SanPham) cbbMaSP.getSelectedItem();
        spct.setMaSp(sp.getMaSp());
        spct.setMaSPCT(txtMaSPCT.getText());
        spct.setTenSPCT(txtTenSPCT.getText());
        spct.setSoLuong(Integer.parseInt(txtSoLuong.getText()));
        spct.setGiaNhap(XMoney.loaiBoDauCham(txtGiaNhap.getText()));
        spct.setGiaBan(XMoney.loaiBoDauCham(txtGiaBan.getText()));
        String nhomPhoBien = (String) cbbNhomPhoBien.getSelectedItem();
        if (nhomPhoBien.equals("Phổ biến")) {
            spct.setNhomPhoBien(true);
        } else {
            spct.setNhomPhoBien(false);
        }
        spct.setMaMauSac(ms.getMaMauSac());
        spct.setMaTheTich(tt.getMaTheTich());
        spct.setMaKL(kl.getMaKL());
        spct.setMaKichThuoc(kt.getMaKichThuoc());
        spct.setMaChatLieu(cl.getMaChatLieu());
        spct.setMaImage(img.getMaImage());
        if (trangThaiSPCT.equals("Đang kinh doanh")) {
            spct.setTrangThai(true);
        } else {
            spct.setTrangThai(false);
        }
        spct.setMoTa(AreaMoTa.getText());
        return spct;
    }
    
    void clickTabelSPCT() {
        try {
//            long giaNhap = XMoney.loaiBoVND(tblSanPhamChiTiet.getValueAt(vitriSPCT, 3).toString());
//            long giaBan = XMoney.loaiBoVND(tblSanPhamChiTiet.getValueAt(vitriSPCT, 4).toString());
//            XMoney.themDauCham(giaNhap);
//            XMoney.themDauCham(giaBan);
            vitriSPCT = tblSanPhamChiTiet.getSelectedRow();
            txtMaSPCT.setText(modelSPCT.getValueAt(vitriSPCT, 0).toString());
            txtTenSPCT.setText(modelSPCT.getValueAt(vitriSPCT, 1).toString());
            txtSoLuong.setText(modelSPCT.getValueAt(vitriSPCT, 2).toString());
            txtGiaNhap.setText(String.valueOf(XMoney.themDauCham(XMoney.loaiBoVND(modelSPCT.getValueAt(vitriSPCT, 3).toString()))));
            txtGiaBan.setText(String.valueOf(XMoney.themDauCham(XMoney.loaiBoVND(modelSPCT.getValueAt(vitriSPCT, 4).toString()))));
            AreaMoTa.setText(modelSPCT.getValueAt(vitriSPCT, 12).toString());
            setSelectedComboboxTT(modelSPCT.getValueAt(vitriSPCT, 7).toString(), cbbTheTich);
            setSelectedComboboxKT(modelSPCT.getValueAt(vitriSPCT, 8).toString(), cbbKichThuoc);
            setSelectedComboboxKL(modelSPCT.getValueAt(vitriSPCT, 9).toString(), cbbKhoiLuong);
            setSelectedComboboxCL(modelSPCT.getValueAt(vitriSPCT, 10).toString(), cbbChatLieu);
            setSelectedComboboxMS(modelSPCT.getValueAt(vitriSPCT, 6).toString(), cbbMauSac);
            setSelectedComboboxIMG(modelSPCT.getValueAt(vitriSPCT, 11).toString(), cbbIMG);
            cbbTrangThaiSPCT.setSelectedItem(modelSPCT.getValueAt(vitriSPCT, 13));
            cbbNhomPhoBien.setSelectedItem(modelSPCT.getValueAt(vitriSPCT, 5).toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void timKiemSPCT() {
        try {
            modelSPCT.setRowCount(0);
            List<SanPhamChiTiet> list = daoSPCT.selectByTimKiemSPCT(txtTimKiemSPCT.getText());
            for (SanPhamChiTiet x : list) {
                modelSPCT.addRow(new Object[]{
                    x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                    x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                    x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void chonAnh() {
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            XImage.save(file);
            ImageIcon icon = XImage.read(file.getName());
            lblTTHinhAnh.setIcon(icon);
            lblTTHinhAnh.setToolTipText(file.getName());
        }
    }
    
    private void addDataCbbKL() {
        try {
            DefaultComboBoxModel model = (DefaultComboBoxModel) cbbKhoiLuong.getModel();
            model.removeAllElements();
            List<KhoiLuong> list = daoKL.selectAll();
            for (KhoiLuong cd : list) {
                model.addElement(cd);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void addDataCbbKT() {
        try {
            DefaultComboBoxModel model = (DefaultComboBoxModel) cbbKichThuoc.getModel();
            model.removeAllElements();
            List<KichThuoc> list = daoKT.selectAll();
            for (KichThuoc cd : list) {
                model.addElement(cd);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void addDataCbbCL() {
        try {
            DefaultComboBoxModel model = (DefaultComboBoxModel) cbbChatLieu.getModel();
            model.removeAllElements();
            List<ChatLieu> list = daoCL.selectAll();
            for (ChatLieu cd : list) {
                model.addElement(cd);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void addDataCbbMS() {
        try {
            DefaultComboBoxModel model = (DefaultComboBoxModel) cbbMauSac.getModel();
            model.removeAllElements();
            List<MauSac> list = daoMS.selectAll();
            for (MauSac cd : list) {
                model.addElement(cd);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void addDataCbbIMG() {
        try {
            DefaultComboBoxModel model = (DefaultComboBoxModel) cbbIMG.getModel();
            model.removeAllElements();
            List<Image> list = daoIMG.selectAll();
            for (Image cd : list) {
                model.addElement(cd);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void addDataCbbDVT() {
        try {
            DefaultComboBoxModel model = (DefaultComboBoxModel) cbbTTDonViTinh.getModel();
            model.removeAllElements();
            List<DonViTinh> list = daoDVT.selectAll();
            for (DonViTinh cd : list) {
                model.addElement(cd);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void clearFromSPCT() {
        cbbTheTich.setSelectedIndex(0);
        cbbKhoiLuong.setSelectedIndex(0);
        cbbChatLieu.setSelectedIndex(0);
        cbbMauSac.setSelectedIndex(0);
        cbbKichThuoc.setSelectedIndex(0);
        cbbIMG.setSelectedIndex(0);
        txtMaSPCT.setText("");
        txtTenSPCT.setText("");
        txtSoLuong.setText("");
        txtGiaNhap.setText("");
        txtGiaBan.setText("");
        AreaMoTa.setText("");
        cbbNhomPhoBien.setSelectedIndex(0);
        txtTimKiemSPCT.setText("");
        txtTimKiemGiaBan.setText("");
        cbbLocChiTietSanPham.setSelectedIndex(0);
        cbbFillMaSP.setSelectedIndex(0);
        cbbMaSP.setSelectedIndex(0);
    }
    
    public void setSelectedComboboxTT(String cbbselected, JComboBox cbb) {
        try {
            for (int i = 0; i < cbb.getItemCount(); i++) {
                TheTich m = (TheTich) cbb.getItemAt(i);
                if (m != null) {
                    if (cbbselected.trim().equals(m.getTheTich() + " Lít")) {
                        cbb.setSelectedItem(m);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void setSelectedComboboxKT(String cbbselected, JComboBox cbb) {
        try {
            for (int i = 0; i < cbb.getItemCount(); i++) {
                KichThuoc m = (KichThuoc) cbb.getItemAt(i);
                if (m != null) {
                    if (cbbselected.trim().equals(m.getChieuDai() + " - " + m.getChieuRong()
                            + " - " + m.getChieuCao() + " - " + m.getMaDV())) {
                        cbb.setSelectedItem(m);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void setSelectedComboboxKL(String cbbselected, JComboBox cbb) {
        try {
            for (int i = 0; i < cbb.getItemCount(); i++) {
                KhoiLuong m = (KhoiLuong) cbb.getItemAt(i);
                if (m != null) {
                    if (cbbselected.trim().equals(m.getKhoiLuong() + " - " + m.getMaDV())) {
                        cbb.setSelectedItem(m);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void setSelectedComboboxCL(String cbbselected, JComboBox cbb) {
        try {
            for (int i = 0; i < cbb.getItemCount(); i++) {
                ChatLieu m = (ChatLieu) cbb.getItemAt(i);
                if (m != null) {
                    if (cbbselected.trim().equals(m.getChatLieu())) {
                        cbb.setSelectedItem(m);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void setSelectedComboboxMS(String cbbselected, JComboBox cbb) {
        try {
            for (int i = 0; i < cbb.getItemCount(); i++) {
                MauSac m = (MauSac) cbb.getItemAt(i);
                if (m != null) {
                    if (cbbselected.trim().equals(m.getTenMauSac())) {
                        cbb.setSelectedItem(m);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void setSelectedComboboxIMG(String cbbselected, JComboBox cbb) {
        try {
            for (int i = 0; i < cbb.getItemCount(); i++) {
                Image m = (Image) cbb.getItemAt(i);
                if (m != null) {
                    if (cbbselected.trim().equals(m.getTenHinh())) {
                        cbb.setSelectedItem(m);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void LamMoiLoc() {
        cbbFillMaSP.setSelectedItem(" ");
        txtTimKiemGiaBan.setText("");
        txtTimKiemSPCT.setText("");
    }

    //--------------------Thuộc tính--------------------------------------------
    void LamMoiFromTT() {
        txtTTMaThuocTinh.setText("");
        txtTTTenThuocTinh.setText("");
        lblTTHinhAnh.setIcon(null);
    }
    
    void LamMoiFromTTKT() {
        txtMaKT.setText("");
        txtChieuDai.setText("");
        txtChieuRong.setText("");
        txtChieuCao.setText("");
    }
    
    void LamMoiFromTTXX() {
        txtTTMaXuatXu.setText("");
        txtTTNhaSanXuat.setText("");
        txtTTNuocSanXuat.setText("");
    }
    
    boolean isValidateThuocTinh() {
        try {
//            if (txtTTMaThuocTinh.getText().trim().equals("")) {
//                Msgbox.alert(this, "Mã thuộc tính không được để trống");
//                return true;
//            } else
            if (txtTTTenThuocTinh.getText().trim().equals("")) {
                Msgbox.alert(this, "Tên thuộc tinh không được để trống");
                return true;
            } else {
                return false;
            }
        } catch (NumberFormatException e) {
            Msgbox.alert(this, "Thể tích và khối lượng phải là số");
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return true;
        }
    }
    
    boolean isCheckThuocTinhTT() {
        boolean check = false;
        List<TheTich> list = daoTT.selectAll();
        for (int i = 0; i < list.size(); i++) {
            if (Objects.equals(list.get(i).getTheTich(), Float.valueOf(txtTTTenThuocTinh.getText()))) {
                Msgbox.alert(this, "Thể tích đã tồn tại");
                check = true;
                break;
            }
        }
        return check;
    }
    
    void fillTableTheTich() {
        try {
            DefaultTableModel model = (DefaultTableModel) tblTTThuocTinh.getModel();
            model.setRowCount(0);
            List<TheTich> list = daoTT.selectAll();
            for (TheTich x : list) {
                model.addRow(new Object[]{
                    x.getMaTheTich(), x.getTheTich() + ""
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void InsertTheTich() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền thêm thuộc tính");
        } else {
            try {
                TheTich tt = GetFromTTInsert();
                daoTT.insertData(tt);
                fillTableTheTich();
                Msgbox.alert(this, "Thêm thành công!");
                LamMoiFromTT();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    void UpdateTheTich() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền sửa thuộc tính");
        } else {
            try {
                TheTich tt = GetFromTT();
                daoTT.updateData(tt);
                fillTableTheTich();
                Msgbox.alert(this, "Sửa thành công!");
                LamMoiFromTT();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    void fillTableKichThuoc() {
        try {
            DefaultTableModel model = (DefaultTableModel) tblTTKichThuoc.getModel();
            model.setRowCount(0);
            List<KichThuoc> list = daoKT.selectAll();
            for (KichThuoc x : list) {
                model.addRow(new Object[]{
                    x.getMaKichThuoc(), x.getChieuDai() + "", x.getChieuRong() + "", x.getChieuCao() + ""
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    boolean isCheckThuocTinhKL() {
        boolean check = false;
        List<KhoiLuong> list = daoKL.selectAll();
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getKhoiLuong() == Float.valueOf(txtTTTenThuocTinh.getText())) {
                Msgbox.alert(this, "Khối lượng đã tồn tại");
                check = true;
                break;
            }
        }
        return check;
    }
    
    void fillTableKhoiLuong() {
        try {
            DefaultTableModel model = (DefaultTableModel) tblTTThuocTinh.getModel();
            model.setRowCount(0);
            List<KhoiLuong> list = daoKL.selectAll();
            for (KhoiLuong x : list) {
                model.addRow(new Object[]{
                    x.getMaKL(), x.getKhoiLuong() + ""
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void InsertKhoiLuong() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền thêm khối lượng");
        } else {
            try {
                KhoiLuong kl = GetFromKLInsert();
                daoKL.insertData(kl);
                fillTableKhoiLuong();
                Msgbox.alert(this, "Thêm thành công!");
                LamMoiFromTT();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    void UpdateKhoiLuong() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền sửa khối lượng");
        } else {
            try {
                KhoiLuong kl = GetFromKL();
                daoKL.updateData(kl);
                fillTableKhoiLuong();
                Msgbox.alert(this, "Sửa thành công!");
                LamMoiFromTT();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    boolean isCheckThuocTinhCL() {
        boolean check = false;
        List<ChatLieu> list = daoCL.selectAll();
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getChatLieu().equalsIgnoreCase(txtTTTenThuocTinh.getText())) {
                Msgbox.alert(this, "Chất liệu đã tồn tại");
                check = true;
                break;
            }
        }
        return check;
    }
    
    void fillTableChatlieu() {
        try {
            DefaultTableModel model = (DefaultTableModel) tblTTThuocTinh.getModel();
            model.setRowCount(0);
            List<ChatLieu> list = daoCL.selectAll();
            for (ChatLieu x : list) {
                model.addRow(new Object[]{
                    x.getMaChatLieu(), x.getChatLieu() + ""
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void InsertChatLieu() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền thêm chất liệu");
        } else {
            try {
                ChatLieu cl = GetFromCLInsert();
                daoCL.insertData(cl);
                fillTableChatlieu();
                Msgbox.alert(this, "Thêm thành công!");
                LamMoiFromTT();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    void UpdateChatLieu() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền sửa chát liệu");
        } else {
            try {
                ChatLieu cl = GetFromCL();
                daoCL.updateData(cl);
                fillTableChatlieu();
                Msgbox.alert(this, "Sửa thành công!");
                LamMoiFromTT();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    boolean isCheckThuocTinhMS() {
        boolean check = false;
        List<MauSac> list = daoMS.selectAll();
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getTenMauSac().equalsIgnoreCase(txtTTTenThuocTinh.getText())) {
                Msgbox.alert(this, "Màu sắc đã tồn tại");
                check = true;
                break;
            }
        }
        return check;
    }
    
    void fillTableMauSac() {
        try {
            DefaultTableModel model = (DefaultTableModel) tblTTThuocTinh.getModel();
            model.setRowCount(0);
            List<MauSac> list = daoMS.selectAll();
            for (MauSac x : list) {
                model.addRow(new Object[]{
                    x.getMaMauSac(), x.getTenMauSac() + ""
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void InsertMauSac() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền thêm màu sắc");
        } else {
            try {
                MauSac ms = GetFromMSInsert();
                daoMS.insertData(ms);
                fillTableMauSac();
                Msgbox.alert(this, "Thêm thành công!");
                LamMoiFromTT();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    void UpdateMauSac() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền sửa màu sắc");
        } else {
            try {
                MauSac ms = GetFromMS();
                daoMS.updateData(ms);
                fillTableMauSac();
                Msgbox.alert(this, "Sửa thành công!");
                LamMoiFromTT();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    boolean isValidateThuocTinhKT() {
        try {
//            if (txtMaKT.getText().trim().equals("")) {
//                Msgbox.alert(this, "Mã kích thước không được để trống");
//                return true;
//            } else
            if (txtChieuDai.getText().trim().equals("")) {
                Msgbox.alert(this, "Chiều dài không được để trống");
                return true;
            } else if (txtChieuRong.getText().trim().equals("")) {
                Msgbox.alert(this, "Chiều rộng không được để trống");
                return true;
            } else if (txtChieuCao.getText().trim().equals("")) {
                Msgbox.alert(this, "Chiều cao không được để trống");
                return true;
            } else {
                return false;
            }
        } catch (NumberFormatException e) {
            Msgbox.alert(this, "Kích thước phải là số");
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return true;
        }
    }
    
    boolean isCheckThuocTinhKT() {
        boolean check = false;
        List<KichThuoc> list = daoKT.selectAll();
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getChieuDai() == Float.valueOf(txtChieuDai.getText())
                    && list.get(i).getChieuRong() == Float.valueOf(txtChieuRong.getText())
                    && list.get(i).getChieuCao() == Float.valueOf(txtChieuCao.getText())) {
                Msgbox.alert(this, "Kích thước đã tồn tại");
                check = true;
                break;
            }
        }
        return check;
    }
    
    void InsertKichThuoc() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền thêm kích thước");
        } else {
            try {
                KichThuoc kt = GetFromKTInsert();
                daoKT.insertData(kt);
                fillTableKichThuoc();
                Msgbox.alert(this, "Thêm thành công!");
                LamMoiFromTTKT();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    void UpdateKichThuoc() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền sửa kích thước");
        } else {
            try {
                KichThuoc kt = GetFromKT();
                daoKT.updateData(kt);
                fillTableKichThuoc();
                Msgbox.alert(this, "Sửa thành công!");
                LamMoiFromTTKT();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    boolean isCheckThuocTinhIMG() {
        boolean check = false;
        List<Image> list = daoIMG.selectAll();
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getTenHinh().equalsIgnoreCase(txtTTTenThuocTinh.getText())) {
                Msgbox.alert(this, "Hình ảnh đã tồn tại");
                check = true;
                break;
            }
        }
        return check;
    }
    
    void fillTableImage() {
        try {
            DefaultTableModel model = (DefaultTableModel) tblTTThuocTinh.getModel();
            model.setRowCount(0);
            List<Image> list = daoIMG.selectAll();
            for (Image x : list) {
                model.addRow(new Object[]{
                    x.getMaImage(), x.getTenHinh() + ""
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void InsertImage() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền thêm hình ảnh");
        } else {
            try {
                Image img = GetFromIMGInsert();
                daoIMG.insertData(img);
                fillTableImage();
                Msgbox.alert(this, "Thêm thành công!");
                LamMoiFromTT();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    void UpdateImage() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền sửa hình ảnh");
        } else {
            try {
                Image img = GetFromIMG();
                daoIMG.updateData(img);
                fillTableImage();
                Msgbox.alert(this, "Sửa thành công!");
                LamMoiFromTT();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    boolean isValidateThuocTinhXX() {
        try {
//            if (txtTTNhaSanXuat.getText().trim().equals("")) {
//                Msgbox.alert(this, "Nhà sản xuất không được để trống");
//                return true;
//            } else
            if (txtTTNuocSanXuat.getText().trim().equals("")) {
                Msgbox.alert(this, "Nước sản xuất không được để trống");
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return true;
        }
    }
    
    boolean isValidateThuocTinhXXUD() {
        try {
            if (txtTTMaXuatXu.getText().trim().equals("")) {
                Msgbox.alert(this, "Mã xuất xứ không được để trống");
                return true;
            } else if (txtTTNhaSanXuat.getText().trim().equals("")) {
                Msgbox.alert(this, "Nhà sản xuất không được để trống");
                return true;
            } else if (txtTTNuocSanXuat.getText().trim().equals("")) {
                Msgbox.alert(this, "Nước sản xuất không được để trống");
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return true;
        }
    }
    
    boolean isCheckThuocTinhXX() {
        boolean check = false;
        List<XuatXu> list = daoXX.selectAll();
//        int maXX = Integer.parseInt(txtTTMaXuatXu.getText());
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getNhaSX().equalsIgnoreCase(txtTTNhaSanXuat.getText())
                    && list.get(i).getNuocSX().equalsIgnoreCase(txtTTNuocSanXuat.getText())) {
                Msgbox.alert(this, "Xuất xứ đã tồn tại");
                check = true;
                break;
            }
        }
        return check;
    }
    
    void fillTableXuatXu() {
        DefaultTableModel model = (DefaultTableModel) tbTTXuatXu.getModel();
        model.setRowCount(0);
        List<XuatXu> list = daoXX.selectAll();
        for (XuatXu x : list) {
            model.addRow(new Object[]{
                x.getMaXX() + "", x.getNhaSX(), x.getNuocSX()
            });
        }
    }
    
    void InsertXuatXu() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền thêm xuất xứ");
        } else {
            try {
                XuatXu xx = GetFromXX();
                daoXX.insertData(xx);
                fillTableXuatXu();
                Msgbox.alert(this, "Thêm thành công!");
                LamMoiFromTTXX();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    void UpdateXuatXu() {
        if (!Auth.isManager()) {
            Msgbox.alert(this, "Bạn không có quyền sửa xuất xứ");
        } else {
            try {
                XuatXu xx = GetFromXXUD();
                daoXX.updateData(xx);
                fillTableXuatXu();
                Msgbox.alert(this, "Sửa thành công!");
                LamMoiFromTTXX();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
//--------------------GetFRom---------------------------------------------------

    TheTich GetFromTT() {
        TheTich tt = new TheTich();
        tt.setMaTheTich(txtTTMaThuocTinh.getText());
        tt.setTheTich(Float.valueOf(txtTTTenThuocTinh.getText()));
        return tt;
    }
    
    ChatLieu GetFromCL() {
        ChatLieu cl = new ChatLieu();
        cl.setMaChatLieu(txtTTMaThuocTinh.getText());
        cl.setChatLieu(txtTTTenThuocTinh.getText());
        return cl;
    }
    
    KhoiLuong GetFromKL() {
        KhoiLuong kl = new KhoiLuong();
        DonViTinh dvt = (DonViTinh) cbbTTDonViTinh.getSelectedItem();
        kl.setMaKL(txtTTMaThuocTinh.getText());
        kl.setMaDV(dvt.getMaDV());
        kl.setKhoiLuong(Float.valueOf(txtTTTenThuocTinh.getText()));
        return kl;
    }
    
    MauSac GetFromMS() {
        MauSac ms = new MauSac();
        ms.setMaMauSac(txtTTMaThuocTinh.getText());
        ms.setTenMauSac(txtTTTenThuocTinh.getText());
        return ms;
    }
    
    Image GetFromIMG() {
        Image img = new Image();
        img.setMaImage(txtTTMaThuocTinh.getText());
        img.setTenHinh(lblTTHinhAnh.getToolTipText());
        return img;
    }
    
    KichThuoc GetFromKT() {
        KichThuoc kt = new KichThuoc();
        DonViTinh dvt = (DonViTinh) cbbTTDonViTinh.getSelectedItem();
        kt.setMaKichThuoc(txtMaKT.getText());
        kt.setChieuDai(Float.parseFloat(txtChieuDai.getText()));
        kt.setChieuRong(Float.parseFloat(txtChieuRong.getText()));
        kt.setChieuCao(Float.parseFloat(txtChieuCao.getText()));
        kt.setMaDV(dvt.getMaDV());
        return kt;
    }
    
    XuatXu GetFromXX() {
        XuatXu xx = new XuatXu();
        xx.setNhaSX(txtTTNhaSanXuat.getText());
        xx.setNuocSX(txtTTNuocSanXuat.getText());
        return xx;
    }
    
    XuatXu GetFromXXUD() {
        XuatXu xx = new XuatXu();
        xx.setMaXX(Integer.parseInt(txtTTMaXuatXu.getText()));
        xx.setNhaSX(txtTTNhaSanXuat.getText());
        xx.setNuocSX(txtTTNuocSanXuat.getText());
        return xx;
    }

    // ------------------------------Update ThuoTinh -------------------
    TheTich GetFromTTInsert() {
        TheTich tt = new TheTich();
        int SoLuongTheTich = tblTTThuocTinh.getRowCount();
        tt.setMaTheTich("TT00" + (SoLuongTheTich + 1));
        tt.setTheTich(Float.valueOf(txtTTTenThuocTinh.getText()));
        return tt;
    }
    
    ChatLieu GetFromCLInsert() {
        ChatLieu cl = new ChatLieu();
        int SoLuongChatLieu = tblTTThuocTinh.getRowCount();
        cl.setMaChatLieu("CL00" + (SoLuongChatLieu + 1));
        cl.setChatLieu(txtTTTenThuocTinh.getText());
        return cl;
    }
    
    KhoiLuong GetFromKLInsert() {
        KhoiLuong kl = new KhoiLuong();
        int SoLuongKhoiLuong = tblTTThuocTinh.getRowCount();
        DonViTinh dvt = (DonViTinh) cbbTTDonViTinh.getSelectedItem();
        kl.setMaKL("KL00" + (SoLuongKhoiLuong + 1));
        kl.setMaDV(dvt.getMaDV());
        kl.setKhoiLuong(Float.valueOf(txtTTTenThuocTinh.getText()));
        return kl;
    }
    
    MauSac GetFromMSInsert() {
        MauSac ms = new MauSac();
        int SoLuongMS = tblTTThuocTinh.getRowCount();
        ms.setMaMauSac("MS00" + (SoLuongMS + 1));
        ms.setTenMauSac(txtTTTenThuocTinh.getText());
        return ms;
    }
    
    Image GetFromIMGInsert() {
        Image img = new Image();
        int SoLuongIMG = tblTTThuocTinh.getRowCount();
        img.setMaImage("IMG00" + (SoLuongIMG + 1));
        img.setTenHinh(lblTTHinhAnh.getToolTipText());
        return img;
    }
    
    KichThuoc GetFromKTInsert() {
        KichThuoc kt = new KichThuoc();
        int SoLuongKichThuoc = tblTTKichThuoc.getRowCount();
        DonViTinh dvt = (DonViTinh) cbbTTDonViTinh.getSelectedItem();
        kt.setMaKichThuoc("KT00" + (SoLuongKichThuoc + 1));
        kt.setChieuDai(Float.parseFloat(txtChieuDai.getText()));
        kt.setChieuRong(Float.parseFloat(txtChieuRong.getText()));
        kt.setChieuCao(Float.parseFloat(txtChieuCao.getText()));
        kt.setMaDV(dvt.getMaDV());
        return kt;
    }
//------------------------------------------------------------------------------

    void clickTbaleThuocTinh() {
        try {
            int vitriThuocTinh = tblTTThuocTinh.getSelectedRow();
            txtTTMaThuocTinh.setText((String) tblTTThuocTinh.getValueAt(vitriThuocTinh, 0));
            txtTTTenThuocTinh.setText((String) tblTTThuocTinh.getValueAt(vitriThuocTinh, 1));
            if (rdTTHinhAnh.isSelected()) {
                lblTTHinhAnh.setIcon(XImage.read((String) tblTTThuocTinh.getValueAt(vitriThuocTinh, 1)));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void clickTbaleThuocTinhKichThuoc() {
        try {
            int vitriThuocTinh = tblTTKichThuoc.getSelectedRow();
            txtMaKT.setText((String) tblTTKichThuoc.getValueAt(vitriThuocTinh, 0));
            txtChieuDai.setText((String) tblTTKichThuoc.getValueAt(vitriThuocTinh, 1));
            txtChieuRong.setText((String) tblTTKichThuoc.getValueAt(vitriThuocTinh, 2));
            txtChieuCao.setText((String) tblTTKichThuoc.getValueAt(vitriThuocTinh, 3));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void clickTbaleThuocTinhXuatXu() {
        try {
            int vitriThuocTinh = tbTTXuatXu.getSelectedRow();
            txtTTMaXuatXu.setText((String) tbTTXuatXu.getValueAt(vitriThuocTinh, 0));
            txtTTNhaSanXuat.setText((String) tbTTXuatXu.getValueAt(vitriThuocTinh, 1));
            txtTTNuocSanXuat.setText((String) tbTTXuatXu.getValueAt(vitriThuocTinh, 2));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void lamMoiThuocTinh() {
        txtTTMaThuocTinh.setText("");
        txtTTTenThuocTinh.setText("");
        lblTTHinhAnh.setIcon(null);
    }
    
    void lamMoiKichThuoc() {
        txtMaKT.setText("");
        txtChieuCao.setText("");
        txtChieuDai.setText("");
        txtChieuRong.setText("");
    }
    
    void lamMoiXuuatXu() {
        txtTTMaXuatXu.setText("");
        txtTTNhaSanXuat.setText("");
        txtTTNuocSanXuat.setText("");
    }

//----------------------tìm kiếm theo giá bán -------------------------
    private void timKiemTheoGiaBanLonHon() {
        try {
            long giaBan = XMoney.loaiBoDauCham(txtTimKiemGiaBan.getText());
            DefaultTableModel modelTimKiemGiaBan = (DefaultTableModel) tblSanPhamChiTiet.getModel();
            modelTimKiemGiaBan.setRowCount(0);
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            for (SanPhamChiTiet x : listSPCT) {
                if (x.getGiaBan() > giaBan) {
                    modelTimKiemGiaBan.addRow(new Object[]{
                        x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                        x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                        x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                    });
                }
            }
        } catch (NumberFormatException e) {
            txtTimKiemGiaBan.setText("");
//            Msgbox.alert(this, "Vui lòng nhập số!");
            e.printStackTrace();
        }
    }
    
    private void timKiemTheoGiaBanLonHonHoacBang() {
        try {
            long giaBan = XMoney.loaiBoDauCham(txtTimKiemGiaBan.getText());
            DefaultTableModel modelTimKiemGiaBan = (DefaultTableModel) tblSanPhamChiTiet.getModel();
            modelTimKiemGiaBan.setRowCount(0);
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            for (SanPhamChiTiet x : listSPCT) {
                if (x.getGiaBan() >= giaBan) {
                    modelTimKiemGiaBan.addRow(new Object[]{
                        x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                        x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                        x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                    });
                }
            }
        } catch (NumberFormatException numberFormatException) {
            txtTimKiemGiaBan.setText("");
//            Msgbox.alert(this, "Vui lòng nhập số!");
            numberFormatException.printStackTrace();
        }
    }
    
    private void timKiemTheoGiaBanNhoHon() {
        try {
            long giaBan = XMoney.loaiBoDauCham(txtTimKiemGiaBan.getText());
            DefaultTableModel modelTimKiemGiaBan = (DefaultTableModel) tblSanPhamChiTiet.getModel();
            modelTimKiemGiaBan.setRowCount(0);
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            for (SanPhamChiTiet x : listSPCT) {
                if (x.getGiaBan() < giaBan) {
                    modelTimKiemGiaBan.addRow(new Object[]{
                        x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                        x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                        x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                    });
                }
            }
        } catch (NumberFormatException numberFormatException) {
            txtTimKiemGiaBan.setText("");
//            Msgbox.alert(this, "Vui lòng nhập số!");
            numberFormatException.printStackTrace();
        }
    }
    
    private void timKiemTheoGiaBanNhoHonHoacBang() {
        try {
            long giaBan = XMoney.loaiBoDauCham(txtTimKiemGiaBan.getText());
            DefaultTableModel modelTimKiemGiaBan = (DefaultTableModel) tblSanPhamChiTiet.getModel();
            modelTimKiemGiaBan.setRowCount(0);
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            for (SanPhamChiTiet x : listSPCT) {
                if (x.getGiaBan() <= giaBan) {
                    modelTimKiemGiaBan.addRow(new Object[]{
                        x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                        x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                        x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                    });
                }
            }
        } catch (NumberFormatException numberFormatException) {
            txtTimKiemGiaBan.setText("");
//            Msgbox.alert(this, "Vui lòng nhập số!");
            numberFormatException.printStackTrace();
        }
    }
    
    private void timKiemTheoGiaBanBang() {
        try {
            long giaBan = XMoney.loaiBoDauCham(txtTimKiemGiaBan.getText());
            DefaultTableModel modelTimKiemGiaBan = (DefaultTableModel) tblSanPhamChiTiet.getModel();
            modelTimKiemGiaBan.setRowCount(0);
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            for (SanPhamChiTiet x : listSPCT) {
                if (x.getGiaBan() == giaBan) {
                    modelTimKiemGiaBan.addRow(new Object[]{
                        x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                        x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                        x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                    });
                }
            }
        } catch (NumberFormatException numberFormatException) {
            txtTimKiemGiaBan.setText("");
//            Msgbox.alert(this, "Vui lòng nhập số!");
            numberFormatException.printStackTrace();
        }
    }
// ---------------------------- tìm kiếm theo giá nhập ----------------------------------------------

    private void timKiemTheoGiaNhapLonHon() {
        try {
            long giaNhap = XMoney.loaiBoDauCham(txtTimKiemGiaBan.getText());
            DefaultTableModel modelTimKiemGiaNhap = (DefaultTableModel) tblSanPhamChiTiet.getModel();
            modelTimKiemGiaNhap.setRowCount(0);
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            for (SanPhamChiTiet x : listSPCT) {
                if (x.getGiaNhap() > giaNhap) {
                    modelTimKiemGiaNhap.addRow(new Object[]{
                        x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                        x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                        x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                    });
                }
            }
        } catch (NumberFormatException numberFormatException) {
            txtTimKiemGiaBan.setText("");
            //Msgbox.alert(this, "Vui lòng nhập số!");
            numberFormatException.printStackTrace();
        }
    }
    
    private void timKiemTheoGiaNhapLonHonHoacBang() {
        try {
            long giaNhap = XMoney.loaiBoDauCham(txtTimKiemGiaBan.getText());
            DefaultTableModel modelTimKiemGiaNhap = (DefaultTableModel) tblSanPhamChiTiet.getModel();
            modelTimKiemGiaNhap.setRowCount(0);
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            for (SanPhamChiTiet x : listSPCT) {
                if (x.getGiaNhap() >= giaNhap) {
                    modelTimKiemGiaNhap.addRow(new Object[]{
                        x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                        x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                        x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                    });
                }
            }
        } catch (NumberFormatException numberFormatException) {
            txtTimKiemGiaBan.setText("");
            //Msgbox.alert(this, "Vui lòng nhập số!");
            numberFormatException.printStackTrace();
        }
    }
    
    private void timKiemTheoGiaNhapNhoHon() {
        try {
            long giaNhap = XMoney.loaiBoDauCham(txtTimKiemGiaBan.getText());
            DefaultTableModel modelTimKiemGiaNhap = (DefaultTableModel) tblSanPhamChiTiet.getModel();
            modelTimKiemGiaNhap.setRowCount(0);
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            for (SanPhamChiTiet x : listSPCT) {
                if (x.getGiaNhap() < giaNhap) {
                    modelTimKiemGiaNhap.addRow(new Object[]{
                        x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                        x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                        x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                    });
                }
            }
        } catch (NumberFormatException numberFormatException) {
            txtTimKiemGiaBan.setText("");
            //Msgbox.alert(this, "Vui lòng nhập số!");
            numberFormatException.printStackTrace();
        }
    }
    
    private void timKiemTheoGiaNhapNhoHonHoacBang() {
        try {
            long giaNhap = XMoney.loaiBoDauCham(txtTimKiemGiaBan.getText());
            DefaultTableModel modelTimKiemGiaNhap = (DefaultTableModel) tblSanPhamChiTiet.getModel();
            modelTimKiemGiaNhap.setRowCount(0);
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            for (SanPhamChiTiet x : listSPCT) {
                if (x.getGiaNhap() <= giaNhap) {
                    modelTimKiemGiaNhap.addRow(new Object[]{
                        x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                        x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                        x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                    });
                }
            }
        } catch (NumberFormatException numberFormatException) {
            txtTimKiemGiaBan.setText("");
            //Msgbox.alert(this, "Vui lòng nhập số!");
            numberFormatException.printStackTrace();
        }
    }
    
    private void timKiemTheoGiaNhapBang() {
        try {
            long giaNhap = XMoney.loaiBoDauCham(txtTimKiemGiaBan.getText());
            DefaultTableModel modelTimKiemGiaNhap = (DefaultTableModel) tblSanPhamChiTiet.getModel();
            modelTimKiemGiaNhap.setRowCount(0);
            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            for (SanPhamChiTiet x : listSPCT) {
                if (x.getGiaNhap() == giaNhap) {
                    modelTimKiemGiaNhap.addRow(new Object[]{
                        x.getMaSPCT(), x.getTenSPCT(), x.getSoLuong(), XMoney.themDauCham(x.getGiaNhap()) + " VND", XMoney.themDauCham(x.getGiaBan()) + " VND",
                        x.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến", x.getTenMauSac(), x.getTheTich() + " Lít",
                        x.getKichCo() + " - " + "CM", x.getKhoiLuong() + " - " + "KG", x.getTenChatLieu(), x.getTenImage(), x.getMoTa(), x.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh"
                    });
                }
            }
        } catch (NumberFormatException numberFormatException) {
            txtTimKiemGiaBan.setText("");
            //Msgbox.alert(this, "Vui lòng nhập số!");
            numberFormatException.printStackTrace();
        }
    }
//----------------------------------------------------------------------------------------------------------------------

    public void XuatFileExcel() {
        try {
            XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFSheet spreadsheet = workbook.createSheet("SPCT");

            // cell là 1 ô - row là 1 hàng - sheet là 1 trang tính - column là cột
            XSSFRow row = null;
            Cell cell = null;
            
            row = spreadsheet.createRow((short) 2);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("DANH SÁCH SẢN PHẨM CHI TIẾT");
            
            row = spreadsheet.createRow((short) 3);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("STT");
            cell = row.createCell(1, CellType.STRING);
            cell.setCellValue("Mã SPCT");
            cell = row.createCell(2, CellType.STRING);
            cell.setCellValue("Tên SPCT");
            cell = row.createCell(3, CellType.STRING);
            cell.setCellValue("Số Lượng");
            cell = row.createCell(4, CellType.STRING);
            cell.setCellValue("Giá Nhập");
            cell = row.createCell(5, CellType.STRING);
            cell.setCellValue("Giá Bán");
            cell = row.createCell(6, CellType.STRING);
            cell.setCellValue("Nhóm Hàng");
            cell = row.createCell(7, CellType.STRING);
            cell.setCellValue("Màu Sắc");
            cell = row.createCell(8, CellType.STRING);
            cell.setCellValue("Thể Tích");
            cell = row.createCell(9, CellType.STRING);
            cell.setCellValue("Kích Thước");
            cell = row.createCell(10, CellType.STRING);
            cell.setCellValue("Chất Liệu");
            cell = row.createCell(11, CellType.STRING);
            cell.setCellValue("Hình Ảnh");
            cell = row.createCell(12, CellType.STRING);
            cell.setCellValue("Mô Tả");
            cell = row.createCell(13, CellType.STRING);
            cell.setCellValue("Trạng thái");

            // tạo list để lấy ra tất cả dữ liệu
//            List<SanPhamChiTiet> listSPCT = daoSPCT.selectAll();
            // tạo vòng for để set giữ liệu cho từng hàng
            for (int i = 0; i < _listSPCT.size(); i++) {
                SanPhamChiTiet SPCT = _listSPCT.get(i);
                row = spreadsheet.createRow((short) 4 + i);
                row.setHeight((short) 400);
                row.createCell(0).setCellValue(i + 1);
                row.createCell(1).setCellValue(SPCT.getMaSPCT());
                row.createCell(2).setCellValue(SPCT.getTenSPCT());
                row.createCell(3).setCellValue(SPCT.getSoLuong());
                row.createCell(4).setCellValue(SPCT.getGiaNhap());
                row.createCell(5).setCellValue(SPCT.getGiaBan());
                row.createCell(6).setCellValue(SPCT.isNhomPhoBien() ? "Phổ biến" : "Không phổ biến");
                row.createCell(7).setCellValue(SPCT.getTenMauSac());
                row.createCell(8).setCellValue(SPCT.getTheTich());
                row.createCell(9).setCellValue(SPCT.getKichCo());
                row.createCell(10).setCellValue(SPCT.getTenChatLieu());
                row.createCell(11).setCellValue(SPCT.getTenImage());
                row.createCell(12).setCellValue(SPCT.getMoTa());
                row.createCell(13).setCellValue(SPCT.isTrangThai() ? "Đang kinh doanh" : "Ngừng kinh doanh");
            }
            
            FileOutputStream out = new FileOutputStream(new File("src\\com\\dienmaydo\\excel\\SPCT.xlsx"));
            workbook.write(out);
            out.close();
            Msgbox.alert(this, "Xuất file thành công!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // -------------- sửa trạng thái ----------------
    SanPhamChiTiet getfromUpdateTrangThai() {
        SanPhamChiTiet spct = new SanPhamChiTiet();
        String trangThai = (String) cbbTrangThaiSP.getSelectedItem();
        if (trangThai.equals("Đang kinh doanh")) {
            spct.setTrangThai(true);
        } else {
            spct.setTrangThai(false);
        }
        spct.setMaSp(txtMaSP.getText());
        return spct;
    }
}
